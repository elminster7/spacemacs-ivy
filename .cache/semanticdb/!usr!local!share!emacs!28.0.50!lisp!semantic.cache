;; Object semanticdb-project-database-file-1593783777e6
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file-1593783777e6"
  :tables
  (list
    (semanticdb-table "semanticdb-table-1593781dba62"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_args")) nil [1049 2578])
            ("defalias" code nil nil [2607 2629])
            ("defalias" code nil nil [2630 2663])
            ("noreturn" function (:arguments ("form")) nil [2665 2869])
            ("1value" function (:arguments ("form")) nil [2871 3072])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3074 3556])
            ("def-edebug-elem-spec" function (:arguments ("name" "spec")) nil [3558 3997])
            ("lambda" function (:arguments ("cdr")) nil [4000 5187])
            ("prog2" function (:arguments ("form1" "form2" "body")) nil [5189 5474])
            ("setq-default" function (:arguments ("args")) nil [5476 6207])
            ("setq-local" function (:arguments ("pairs")) nil [6209 7386])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [7388 7829])
            ("buffer-local-boundp" function (:arguments ("symbol" "buffer")) nil [7831 8057])
            ("push" function (:arguments ("newelt" "place")) nil [8059 8653])
            ("pop" function (:arguments ("place")) nil [8655 9512])
            ("when" function (:arguments ("cond" "body")) nil [9514 9802])
            ("unless" function (:arguments ("cond" "body")) nil [9804 10090])
            ("subr-primitive-p" function (:arguments ("object")) nil [10092 10250])
            ("xor" function (:arguments ("cond1" "cond2")) nil [10252 10518])
            ("dolist" function (:arguments ("spec" "body")) nil [10520 11952])
            ("dotimes" function (:arguments ("spec" "body")) nil [11954 13497])
            ("declare" function (:arguments ("_specs")) nil [13499 14074])
            ("ignore-errors" function (:arguments ("body")) nil [14076 14383])
            ("ignore-error" function (:arguments ("condition" "body")) nil [14385 14679])
            ("gensym-counter" variable nil nil [14710 14813])
            ("gensym" function (:arguments ("prefix")) nil [14815 15135])
            ("ignore" function (:arguments ("_arguments")) nil [15137 15339])
            ("always" function (:arguments ("_arguments")) nil [15341 15491])
            ("error" function (:arguments ("args")) nil [15548 16182])
            ("user-error" function (:arguments ("format" "args")) nil [16184 16983])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [16985 17898])
            ("frame-configuration-p" function (:arguments ("object")) nil [18012 18267])
            ("apply-partially" function (:arguments ("fun" "args")) nil [18269 18646])
            ("zerop" function (:arguments ("number")) nil [18648 18878])
            ("fixnump" function (:arguments ("object")) nil [18880 19027])
            ("bignump" function (:arguments ("object")) nil [19029 19138])
            ("lsh" function (:arguments ("value" "count")) nil [19140 19657])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [19851 20431])
            ("caar" function (:arguments ("x")) nil [20433 20560])
            ("cadr" function (:arguments ("x")) nil [20562 20689])
            ("cdar" function (:arguments ("x")) nil [20691 20818])
            ("cddr" function (:arguments ("x")) nil [20820 20947])
            ("caaar" function (:arguments ("x")) nil [20949 21100])
            ("caadr" function (:arguments ("x")) nil [21102 21253])
            ("cadar" function (:arguments ("x")) nil [21255 21406])
            ("caddr" function (:arguments ("x")) nil [21408 21559])
            ("cdaar" function (:arguments ("x")) nil [21561 21712])
            ("cdadr" function (:arguments ("x")) nil [21714 21865])
            ("cddar" function (:arguments ("x")) nil [21867 22018])
            ("cdddr" function (:arguments ("x")) nil [22020 22171])
            ("caaaar" function (:arguments ("x")) nil [22173 22344])
            ("caaadr" function (:arguments ("x")) nil [22346 22517])
            ("caadar" function (:arguments ("x")) nil [22519 22690])
            ("caaddr" function (:arguments ("x")) nil [22692 22863])
            ("cadaar" function (:arguments ("x")) nil [22865 23036])
            ("cadadr" function (:arguments ("x")) nil [23038 23209])
            ("caddar" function (:arguments ("x")) nil [23211 23382])
            ("cadddr" function (:arguments ("x")) nil [23384 23555])
            ("cdaaar" function (:arguments ("x")) nil [23557 23728])
            ("cdaadr" function (:arguments ("x")) nil [23730 23901])
            ("cdadar" function (:arguments ("x")) nil [23903 24074])
            ("cdaddr" function (:arguments ("x")) nil [24076 24247])
            ("cddaar" function (:arguments ("x")) nil [24249 24420])
            ("cddadr" function (:arguments ("x")) nil [24422 24593])
            ("cdddar" function (:arguments ("x")) nil [24595 24766])
            ("cddddr" function (:arguments ("x")) nil [24768 24939])
            ("last" function (:arguments ("list" "n")) nil [24941 25391])
            ("butlast" function (:arguments ("list" "n")) nil [25393 25654])
            ("nbutlast" function (:arguments ("list" "n")) nil [25656 25931])
            ("put" code nil nil [26025 26053])
            ("put" code nil nil [26054 26104])
            ("delete-dups" function (:arguments ("list")) nil [26106 26893])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [26960 27418])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [27420 29237])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [29239 30056])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [30096 30897])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [30899 31367])
            ("assoc-delete-all" function (:arguments ("key" "alist" "test")) nil [31369 31953])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [31955 32165])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [32167 32660])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove" "testfn")) nil [32662 33823])
            ("remove" function (:arguments ("elt" "seq")) nil [33825 34303])
            ("remq" function (:arguments ("elt" "list")) nil [34305 34669])
            ("kbd" function (:arguments ("keys")) nil [34694 35255])
            ("undefined" function nil nil [35257 35817])
            ("put" code nil nil [35912 35947])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [35949 36516])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [36518 37170])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [37172 39235])
            ("define-prefix-command" function (:arguments ("command" "mapvar" "name")) nil [39237 39962])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [39964 40644])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [40646 41116])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [41170 41770])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [41772 42238])
            ("keymap-canonicalize" function (:arguments ("map")) nil [42240 44111])
            ("put" code nil nil [44113 44170])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [44172 44547])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [44578 45504])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [45506 46310])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [46312 46508])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [46510 46739])
            ("local-key-binding" function (:arguments ("keys" "accept-default")) nil [46741 47213])
            ("global-key-binding" function (:arguments ("keys" "accept-default")) nil [47215 47739])
            ("key-substitution-in-progress" variable nil nil [47796 47889])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [47891 49272])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [49274 50937])
            ("esc-map" variable (:default-value (let ((map (make-keymap))) (define-key map "u" #'upcase-word) (define-key map "l" #'downcase-word) (define-key map "c" #'capitalize-word) (define-key map "x" #'execute-extended-command) (define-key map "X" #'execute-extended-command-for-buffer) map)) nil [50971 51383])
            ("fset" code nil nil [51384 51410])
            ("make-obsolete" code nil nil [51411 51454])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [51456 51534])
            ("defalias" code nil nil [51535 51573])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [51575 51647])
            ("defalias" code nil nil [51648 51686])
            ("tab-prefix-map" variable (:default-value (make-sparse-keymap)) nil [51688 51773])
            ("ctl-x-map" variable (:default-value (let ((map (make-keymap))) (define-key map "4" 'ctl-x-4-prefix) (define-key map "5" 'ctl-x-5-prefix) (define-key map "t" tab-prefix-map) (define-key map "b" #'switch-to-buffer) (define-key map "k" #'kill-buffer) (define-key map "" #'upcase-region) (put 'upcase-region 'disabled t) (define-key map "" #'downcase-region) (put 'downcase-region 'disabled t) (define-key map "<" #'scroll-left) (define-key map ">" #'scroll-right) map)) nil [51775 52391])
            ("fset" code nil nil [52392 52426])
            ("make-obsolete" code nil nil [52427 52478])
            ("global-map" variable (:default-value (let ((map (make-keymap))) (define-key map "" 'ESC-prefix) (define-key map "" 'Control-X-prefix) (define-key map "	" #'self-insert-command) (let* ((vec1 (make-vector 1 nil)) (f (lambda (from to) (while (< from to) (aset vec1 0 from) (define-key map vec1 #'self-insert-command) (setq from (1+ from)))))) (funcall f 32 127) (when (eq system-type 'ms-dos) (funcall f 128 160)) (funcall f 160 256)) (define-key map "" #'beginning-of-line) (define-key map "" #'backward-char) (define-key map "" #'end-of-line) (define-key map "" #'forward-char) (define-key map "" #'suspend-emacs) (define-key map "" #'suspend-emacs) (define-key map "" #'scroll-up-command) (define-key map "\366" #'scroll-down-command) (define-key map "\226" #'scroll-other-window) (define-key map "\203" #'exit-recursive-edit) (define-key map "" #'abort-recursive-edit) map)) nil [52480 53847])
            ("use-global-map" code nil nil [53848 53875])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [53915 53970])
            ("listify-key-sequence" function (:arguments ("key")) nil [53972 54232])
            ("eventp" function (:arguments ("object")) nil [54234 54503])
            ("event-modifiers" function (:arguments ("event")) nil [54505 55799])
            ("event-basic-type" function (:arguments ("event")) nil [55801 56569])
            ("mouse-movement-p" function (:arguments ("object")) nil [56571 56704])
            ("mouse-event-p" function (:arguments ("object")) nil [56706 56924])
            ("event-start" function (:arguments ("event")) nil [56926 58145])
            ("event-end" function (:arguments ("event")) nil [58147 58465])
            ("event-click-count" function (:arguments ("event")) nil [58467 58677])
            ("event-line-count" function (:arguments ("event")) nil [58679 58878])
            ("posnp" function (:arguments ("obj")) nil [58935 59583])
            ("posn-window" function (:arguments ("position")) nil [59617 59891])
            ("posn-area" function (:arguments ("position")) nil [59893 60217])
            ("posn-point" function (:arguments ("position")) nil [60219 60685])
            ("posn-set-point" function (:arguments ("position")) nil [60687 61263])
            ("posn-x-y" function (:arguments ("position")) nil [61265 61518])
            ("declare-function" code nil nil [61520 61586])
            ("posn-col-row" function (:arguments ("position")) nil [61588 63406])
            ("posn-actual-col-row" function (:arguments ("position")) nil [63408 63996])
            ("posn-timestamp" function (:arguments ("position")) nil [63998 64186])
            ("posn-string" function (:arguments ("position")) nil [64188 64547])
            ("posn-image" function (:arguments ("position")) nil [64549 64789])
            ("posn-object" function (:arguments ("position")) nil [64791 65160])
            ("posn-object-x-y" function (:arguments ("position")) nil [65162 65449])
            ("posn-object-width-height" function (:arguments ("position")) nil [65451 65711])
            ("values--store-value" function (:arguments ("value")) nil [65713 65880])
            ("make-obsolete" code nil nil [65923 65972])
            ("make-obsolete" code nil nil [65974 66070])
            ("make-obsolete" code nil nil [66071 66147])
            ("make-obsolete" code nil nil [66790 66863])
            ("make-obsolete" code nil nil [66864 66939])
            ("make-obsolete" code nil nil [66940 67013])
            ("make-obsolete" code nil nil [67014 67089])
            ("log10" function (:arguments ("x")) nil [67091 67200])
            ("set-advertised-calling-convention" code nil nil [67202 67303])
            ("set-advertised-calling-convention" code nil nil [67304 67372])
            ("set-advertised-calling-convention" code nil nil [67373 67444])
            ("set-advertised-calling-convention" code nil nil [67445 67530])
            ("set-advertised-calling-convention" code nil nil [67531 67630])
            ("set-advertised-calling-convention" code nil nil [67631 67731])
            ("make-obsolete-variable" code nil nil [67794 67877])
            ("make-obsolete-variable" code nil nil [67878 67950])
            ("make-obsolete-variable" code nil nil [67951 68027])
            ("make-obsolete-variable" code nil nil [68028 68085])
            ("make-obsolete" code nil nil [68086 68142])
            ("make-obsolete" code nil nil [68143 68203])
            ("make-obsolete-variable" code nil nil [68204 68265])
            ("make-obsolete" code nil nil [68267 68331])
            ("make-obsolete-variable" code nil nil [68333 68457])
            ("make-obsolete-variable" code nil nil [68704 68768])
            ("make-obsolete-variable" code nil nil [68770 68828])
            ("defvaralias" code nil nil [68830 68887])
            ("define-obsolete-variable-alias" code nil nil [68888 68986])
            ("make-obsolete-variable" code nil nil [68987 69086])
            ("inhibit--record-char" variable nil nil [69088 69238])
            ("make-obsolete-variable" code nil nil [69239 69296])
            ("defalias" code nil nil [69552 69597])
            ("defalias" code nil nil [69598 69643])
            ("defalias" code nil nil [69644 69678])
            ("defalias" code nil nil [69679 69713])
            ("defalias" code nil nil [69714 69751])
            ("defalias" code nil nil [69752 69788])
            ("defalias" code nil nil [69789 69816])
            ("defalias" code nil nil [69817 69844])
            ("defalias" code nil nil [69845 69868])
            ("defalias" code nil nil [69894 69934])
            ("defalias" code nil nil [69935 69990])
            ("defalias" code nil nil [69991 70061])
            ("defalias" code nil nil [70062 70134])
            ("defalias" code nil nil [70135 70179])
            ("defalias" code nil nil [70180 70225])
            ("defalias" code nil nil [70226 70260])
            ("defalias" code nil nil [70261 70295])
            ("defalias" code nil nil [70327 70371])
            ("defalias" code nil nil [70372 70422])
            ("define-obsolete-function-alias" code nil nil [70424 70509])
            ("add-hook" function (:arguments ("hook" "function" "depth" "local")) nil [70548 74419])
            ("remove-hook" function
               (:user-visible-flag t
                :arguments ("hook" "function" "local"))
                nil [74421 77872])
            ("letrec" function (:arguments ("binders" "body")) nil [77874 79815])
            ("dlet" function (:arguments ("binders" "body")) nil [79817 80402])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [80405 81815])
            ("subr--with-wrapper-hook-no-warnings" function (:arguments ("hook" "args" "body")) nil [81817 83697])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [83699 87117])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [87120 88364])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [88366 89775])
            ("delay-mode-hooks" variable nil nil [89797 89891])
            ("defvar-local" code nil nil [89892 89979])
            ("put" code nil nil [89980 90022])
            ("defvar-local" code nil nil [90024 90173])
            ("change-major-mode-after-body-hook" variable nil nil [90175 90289])
            ("after-change-major-mode-hook" variable nil nil [90291 90393])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [90395 92193])
            ("delay-mode-hooks" function (:arguments ("body")) nil [92195 92594])
            ("provided-mode-derived-p" function (:arguments ("mode" "modes")) nil [92655 93300])
            ("derived-mode-p" function (:arguments ("modes")) nil [93302 93533])
            ("defvar-local" code nil nil [93535 93575])
            ("put" code nil nil [93576 93623])
            ("major-mode-suspend" function nil nil [93625 93915])
            ("major-mode-restore" function (:arguments ("avoided-modes")) nil [93917 94743])
            ("minor-mode-list" variable (:default-value '(auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode)) nil [94934 95127])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [95129 97851])
            ("autoloadp" function (:arguments ("object")) nil [97873 97975])
            ("define-symbol-prop" function (:arguments ("symbol" "prop" "val")) nil [98459 99222])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [99224 100855])
            ("declare-function" code nil nil [100857 100909])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [100911 102120])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [102145 103470])
            ("process-lines-handling-status" function (:arguments ("program" "status-handler" "args")) nil [103472 104359])
            ("process-lines" function (:arguments ("program" "args")) nil [104361 104642])
            ("process-lines-ignore-status" function (:arguments ("program" "args")) nil [104644 104905])
            ("process-live-p" function (:arguments ("process")) nil [104907 105219])
            ("process-kill-buffer-query-function" function nil nil [105221 105640])
            ("add-hook" code nil nil [105642 105718])
            ("process-get" function (:arguments ("process" "propname")) nil [105749 105961])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [105963 106202])
            ("memory-limit" function nil nil [106204 106360])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [106584 106669])
            ("read-key-full-map" variable
               (:constant-flag t
                :default-value (let ((map (make-sparse-keymap))) (define-key map [t] 'dummy) (define-key map [27] nil) map))
                nil [106671 106972])
            ("read-key-delay" variable (:default-value 0.01) nil [106974 107002])
            ("read-key" function (:arguments ("prompt" "disable-fallbacks")) nil [107051 111153])
            ("read--potential-mouse-event" function nil nil [111323 111864])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" #'delete-minibuffer-contents) map)) nil [111866 112203])
            ("read-password--hide-password" function nil nil [112205 112443])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [112445 114853])
            ("read-number-history" variable nil nil [114855 114943])
            ("read-number" function (:arguments ("prompt" "default" "hist")) nil [114945 116183])
            ("read-char-choice-use-read-key" variable nil nil [116185 116328])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [116330 116563])
            ("read-char-choice-with-read-key" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [116565 118488])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [118490 121824])
            ("goto-char--read-natnum-interactive" function (:arguments ("prompt")) nil [121826 122272])
            ("read-char-history" variable nil nil [122276 122376])
            ("read-char-from-minibuffer-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map [remap self-insert-command] #'read-char-from-minibuffer-insert-char) (define-key map [remap recenter-top-bottom] #'minibuffer-recenter-top-bottom) (define-key map [remap scroll-up-command] #'minibuffer-scroll-up-command) (define-key map [remap scroll-down-command] #'minibuffer-scroll-down-command) (define-key map [remap scroll-other-window] #'minibuffer-scroll-other-window) (define-key map [remap scroll-other-window-down] #'minibuffer-scroll-other-window-down) map)) nil [122378 123075])
            ("read-char-from-minibuffer-map-hash" variable
               (:constant-flag t
                :default-value (make-hash-table :test 'equal))
                nil [123077 123155])
            ("read-char-from-minibuffer-insert-char" function (:user-visible-flag t) nil [123157 123465])
            ("read-char-from-minibuffer-insert-other" function (:user-visible-flag t) nil [123467 123843])
            ("read-char-from-minibuffer" function (:arguments ("prompt" "chars" "history")) nil [123845 126810])
            ("declare-function" code nil nil [126852 126931])
            ("y-or-n-p-history-variable" variable nil nil [126933 127025])
            ("y-or-n-p-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (dolist (symbol '(act act-and-show act-and-exit automatic)) (define-key map (vector 'remap symbol) #'y-or-n-p-insert-y)) (define-key map [remap skip] #'y-or-n-p-insert-n) (dolist (symbol '(backup undo undo-all edit edit-replacement delete-and-edit ignore self-insert-command)) (define-key map (vector 'remap symbol) #'y-or-n-p-insert-other)) (define-key map [remap recenter] #'minibuffer-recenter-top-bottom) (define-key map [remap scroll-up] #'minibuffer-scroll-up-command) (define-key map [remap scroll-down] #'minibuffer-scroll-down-command) (define-key map [remap scroll-other-window] #'minibuffer-scroll-other-window) (define-key map [remap scroll-other-window-down] #'minibuffer-scroll-other-window-down) (define-key map [escape] #'abort-recursive-edit) (dolist (symbol '(quit exit exit-prefix)) (define-key map (vector 'remap symbol) #'abort-recursive-edit)) map)) nil [127027 128279])
            ("y-or-n-p-insert-y" function (:user-visible-flag t) nil [128281 128559])
            ("y-or-n-p-insert-n" function (:user-visible-flag t) nil [128561 128839])
            ("y-or-n-p-insert-other" function (:user-visible-flag t) nil [128841 129223])
            ("y-or-n-p-use-read-key" variable nil nil [129225 129364])
            ("y-or-n-p" function (:arguments ("prompt")) nil [129366 134858])
            ("atomic-change-group" function (:arguments ("body")) nil [134889 136138])
            ("prepare-change-group" function (:arguments ("buffer")) nil [136140 137616])
            ("activate-change-group" function (:arguments ("handle")) nil [137618 138678])
            ("accept-change-group" function (:arguments ("handle")) nil [138680 138971])
            ("cancel-change-group" function (:arguments ("handle")) nil [138973 140592])
            ("define-obsolete-function-alias" code nil nil [140650 140733])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [140735 142287])
            ("copy-overlay" function (:arguments ("o")) nil [142316 142890])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [142892 144291])
            ("suspend-hook" variable nil nil [144313 144397])
            ("suspend-resume-hook" variable nil nil [144399 144497])
            ("temp-buffer-show-hook" variable nil nil [144499 144715])
            ("temp-buffer-setup-hook" variable nil nil [144717 144948])
            ("user-emacs-directory" variable nil nil [144950 145283])
            ("buffer-narrowed-p" function nil nil [145316 145450])
            ("find-tag-default-bounds" function nil nil [145452 145706])
            ("find-tag-default" function nil nil [145708 145974])
            ("find-tag-default-as-regexp" function nil nil [145976 146412])
            ("find-tag-default-as-symbol-regexp" function nil nil [146414 146975])
            ("play-sound" function (:arguments ("sound")) nil [146977 147796])
            ("declare-function" code nil nil [147798 147854])
            ("shell-quote-argument" function (:arguments ("argument")) nil [147856 150191])
            ("string-to-list" function (:arguments ("string")) nil [150193 150292])
            ("string-to-vector" function (:arguments ("string")) nil [150294 150394])
            ("string-or-null-p" function (:arguments ("object")) nil [150396 150533])
            ("booleanp" function (:arguments ("object")) nil [150535 150693])
            ("special-form-p" function (:arguments ("object")) nil [150695 150938])
            ("macrop" function (:arguments ("object")) nil [150940 151170])
            ("field-at-pos" function (:arguments ("pos")) nil [151172 151442])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [151444 151943])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [151945 152751])
            ("yank-handled-properties" variable nil nil [152858 152890])
            ("yank-excluded-properties" variable nil nil [152891 152924])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [152926 153799])
            ("yank-undo-function" variable nil nil [153801 153828])
            ("insert-for-yank" function (:arguments ("string")) nil [153830 154311])
            ("insert-for-yank-1" function (:arguments ("string")) nil [154313 155485])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [155487 155972])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [155974 156660])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [156662 156974])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [157103 157541])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "command")) nil [157579 158294])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "command")) nil [158296 158693])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [158695 160337])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [160339 160897])
            ("call-shell-region" function (:arguments ("start" "end" "command" "delete" "buffer")) nil [160899 162089])
            ("track-mouse" function (:arguments ("body")) nil [162144 162459])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [162461 162849])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [162851 163371])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [163373 163933])
            ("generate-new-buffer" function (:arguments ("name" "inhibit-buffer-hooks")) nil [163935 164257])
            ("with-selected-window" function (:arguments ("window" "body")) nil [164259 165397])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [165399 166140])
            ("save-window-excursion" function (:arguments ("body")) nil [166142 166961])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [166963 168358])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [168411 170864])
            ("with-temp-file" function (:arguments ("file" "body")) nil [170866 171656])
            ("with-temp-message" function (:arguments ("message" "body")) nil [171658 172585])
            ("with-temp-buffer" function (:arguments ("body")) nil [172587 173259])
            ("with-silent-modifications" function (:arguments ("body")) nil [173261 174250])
            ("with-output-to-string" function (:arguments ("body")) nil [174252 174671])
            ("with-local-quit" function (:arguments ("body")) nil [174673 175428])
            ("setq" code nil nil [175490 175622])
            ("while-no-input" function (:arguments ("body")) nil [175624 177262])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [177264 177817])
            ("define-obsolete-function-alias" code nil nil [177819 177914])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [177916 178851])
            ("combine-after-change-calls" function (:arguments ("body")) nil [178853 179548])
            ("undo--combining-change-calls" variable nil nil [179631 179726])
            ("combine-change-calls-1" function (:arguments ("beg" "end" "body")) nil [179728 182700])
            ("combine-change-calls" function (:arguments ("beg" "end" "body")) nil [182702 183856])
            ("undo--wrap-and-run-primitive-undo" function (:arguments ("beg" "end" "list")) nil [183858 184581])
            ("with-case-table" function (:arguments ("table" "body")) nil [184665 185186])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [185188 185613])
            ("save-match-data" function (:arguments ("body")) nil [185903 186828])
            ("match-string" function (:arguments ("num" "string")) nil [186830 187508])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [187510 188267])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [188270 188841])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [188844 190115])
            ("looking-at-p" function (:arguments ("regexp")) nil [190117 190295])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [190297 190517])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [190519 192429])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [192451 192804])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [193066 196181])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [196183 196863])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [196865 197501])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [197535 197939])
            ("string-replace" function (:arguments ("fromstring" "tostring" "instring")) nil [197941 198733])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [198735 201439])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [201442 201837])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [201839 202248])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [202250 203032])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [203034 203269])
            ("load-history-regexp" function (:arguments ("file")) nil [203310 203948])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [203950 204386])
            ("eval-after-load" function (:arguments ("file" "form")) nil [204388 208366])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [208368 208757])
            ("after-load-functions" variable nil nil [208759 208932])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [208934 210586])
            ("display-delayed-warnings" function nil nil [210590 210858])
            ("collapse-delayed-warnings" function nil nil [210860 211539])
            ("delayed-warnings-hook" variable (:default-value '(collapse-delayed-warnings display-delayed-warnings)) nil [211659 211999])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [212001 212256])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [212285 212908])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [212910 213398])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [213422 214058])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [214060 214379])
            ("syntax-after" function (:arguments ("pos")) nil [214381 214754])
            ("syntax-class" function (:arguments ("syntax")) nil [214756 215107])
            ("word-move-empty-char-table" variable nil nil [215138 215308])
            ("forward-word-strictly" function (:arguments ("arg")) nil [215310 216048])
            ("backward-word-strictly" function (:arguments ("arg")) nil [216050 216632])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [216650 217233])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [217248 217797])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [217818 218300])
            ("text-clone--maintaining" variable nil nil [218322 218358])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [218360 220426])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [220428 222676])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [222784 224363])
            ("backtrace-frames" function (:arguments ("base")) nil [224367 224719])
            ("backtrace-frame" function (:arguments ("nframes" "base")) nil [224721 225521])
            ("called-interactively-p-functions" variable nil nil [225525 225942])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function 'funcall-interactively))
                nil [225944 226029])
            ("called-interactively-p" function (:arguments ("kind")) nil [226031 230222])
            ("interactive-p" function nil nil [230224 231416])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [231418 231763])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [231765 232073])
            ("define-obsolete-function-alias" code nil nil [232075 232163])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [232165 234954])
            ("progress-reporter-update" function (:arguments ("reporter" "value" "suffix")) nil [235601 236528])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [236530 238343])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message" "suffix")) nil [238345 238862])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [238864 238981])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value" "suffix")) nil [238983 241154])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [241156 241311])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "reporter-or-message" "body")) nil [241313 242609])
            ("dolist-with-progress-reporter" function (:arguments ("spec" "reporter-or-message" "body")) nil [242611 243860])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [243897 244056])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value '(("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?unknown$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1)))
                nil [244059 245704])
            ("version-to-list" function (:arguments ("ver")) nil [245707 248490])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [248492 249323])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [249326 250125])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [250128 250913])
            ("version-list-not-zero" function (:arguments ("lst")) nil [250915 251225])
            ("version<" function (:arguments ("v1" "v2")) nil [251228 251732])
            ("version<=" function (:arguments ("v1" "v2")) nil [251734 252252])
            ("version=" function (:arguments ("v1" "v2")) nil [252254 252748])
            ("package--builtin-versions" variable (:default-value (purecopy `((emacs \, (version-to-list emacs-version))))) nil [252750 253127])
            ("package--description-file" function (:arguments ("dir")) nil [253129 253518])
            ("with-mutex" function (:arguments ("mutex" "body")) nil [253543 253893])
            ("apropos-internal" function (:arguments ("regexp" "predicate")) nil [253911 254499])
            ("definition-prefixes" variable (:default-value (make-hash-table :test 'equal)) nil [254514 255215])
            ("register-definition-prefixes" function (:arguments ("file" "prefixes")) nil [255217 255439])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value '("--"))
                nil [255441 255503])
            ("when" code nil nil [255655 255780])
            ("unmsys--file-name" function (:arguments ("file")) nil [255913 256400])
            ("flatten-tree" function (:arguments ("tree")) nil [256402 256972])
            ("defalias" code nil nil [257067 257106])
            ("string-trim-left" function (:arguments ("string" "regexp")) nil [257108 257378])
            ("string-trim-right" function (:arguments ("string" "regexp")) nil [257380 257680])
            ("string-trim" function (:arguments ("string" "trim-left" "trim-right")) nil [257682 257949])
            ("regexp-unmatchable" variable
               (:constant-flag t
                :default-value "\\`a\\`")
                nil [258024 258126])
            ("run-hook-query-error-with-timeout" function (:arguments ("hook")) nil [258128 258741])
            ("internal--fill-string-single-line" function (:arguments ("str")) nil [258743 259307])
            ("internal--format-docstring-line" function (:arguments ("string" "objects")) nil [259309 259542]))          
      :file "subr.el.gz"
      :pointmax 259566
      :fsize 74989
      :lastmodtime '(24807 40778 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-1593781ec118"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ibuffer" include nil nil [1530 1548])
            ("subr-x" include nil nil [1614 1631])
            ("cl-lib" include nil nil [1594 1611])
            ("ibuf-macs" include nil nil [1571 1591])
            ("ibuffer-remove-alist" function (:arguments ("key" "alist")) nil [1656 1855])
            ("ibuffer-remove-duplicates" function (:arguments ("list")) nil [1879 2147])
            ("ibuffer-split-list" function (:arguments ("ibuffer-split-list-fn" "ibuffer-split-list-elts")) nil [2149 2578])
            ("ibuffer-never-show-predicates" variable nil nil [2580 2974])
            ("ibuffer-always-show-predicates" variable nil nil [2976 3463])
            ("ibuffer-never-search-content-name" variable (:default-value (let* ((names '("Completions" "Help" "Messages" "Pp Eval Output" "CompileLog" "Info" "Buffer List" "Ibuffer" "Apropos")) (partial '("Customize Option: " "Async Shell Command\\*" "Shell Command Output\\*" "ediff ")) (beg "\\`\\*") (end "\\*\\'") (excluded (mapcar (lambda (x) (format "%s%s" beg x)) partial))) (dolist (str names (nreverse excluded)) (push (format "%s%s%s" beg str end) excluded)))) nil [3465 4269])
            ("ibuffer-never-search-content-mode" variable (:default-value '(dired-mode)) nil [4271 4563])
            ("ibuffer-tmp-hide-regexps" variable nil nil [4565 4669])
            ("ibuffer-tmp-show-regexps" variable nil nil [4671 4778])
            ("ibuffer-auto-buffers-changed" variable nil nil [4780 4821])
            ("ibuffer-update-saved-filters-format" function (:arguments ("filters")) nil [4823 5712])
            ("ibuffer-saved-filters" variable (:default-value '(("programming" (or (derived-mode . prog-mode) (mode . ess-mode) (mode . compilation-mode))) ("text document" (and (derived-mode . text-mode) (not (starred-name)))) ("TeX" (or (derived-mode . tex-mode) (mode . latex-mode) (mode . context-mode) (mode . ams-tex-mode) (mode . bibtex-mode))) ("web" (or (derived-mode . sgml-mode) (derived-mode . css-mode) (mode . javascript-mode) (mode . js2-mode) (mode . scss-mode) (derived-mode . haml-mode) (mode . sass-mode))) ("gnus" (or (mode . message-mode) (mode . mail-mode) (mode . gnus-group-mode) (mode . gnus-summary-mode) (mode . gnus-article-mode))))) nil [5714 8501])
            ("ibuffer-old-saved-filters-warning" variable (:default-value (concat "Deprecated format detected for variable `ibuffer-saved-filters'.

The format has been repaired and the variable modified accordingly.
You can save the current value through the customize system by
either clicking or hitting return " (make-text-button "here" nil 'face '(:weight bold :inherit button) 'mouse-face '(:weight normal :background "gray50" :inherit button) 'follow-link t 'help-echo "Click or RET: save new value in customize" 'action (lambda (_) (customize-save-variable 'ibuffer-saved-filters ibuffer-saved-filters) (message "Saved updated ibuffer-saved-filters."))) ".  See below for
an explanation and alternative ways to save the repaired value.

Explanation: For the list variable `ibuffer-saved-filters',
elements of the form (STRING (FILTER-SPECS...)) are deprecated
and should instead have the form (STRING FILTER-SPECS...), where
each filter spec is a cons cell with a symbol in the car.  See
`ibuffer-saved-filters' for details.  The repaired value fixes
this format without changing the meaning of the saved filters.

Alternative ways to save the repaired value:

  1. Do M-x customize-variable and entering `ibuffer-saved-filters'
     when prompted.

  2. Set the updated value manually by copying the
     following emacs-lisp form to your emacs init file.

%s
")) nil [8503 10019])
            ("ibuffer-filtering-qualifiers" variable nil nil [10021 11625])
            ("ibuffer-filtering-alist" variable nil nil [11678 12111])
            ("ibuffer-filter-format-alist" variable nil nil [12113 12740])
            ("ibuffer-cached-filter-formats" variable nil nil [12742 12784])
            ("ibuffer-compiled-filter-formats" variable nil nil [12785 12829])
            ("ibuffer-filter-groups" variable nil nil [12831 13395])
            ("ibuffer-show-empty-filter-groups" variable (:default-value t) nil [13397 13548])
            ("ibuffer-saved-filter-groups" variable nil nil [13550 14143])
            ("ibuffer-hidden-filter-groups" variable nil nil [14145 14243])
            ("ibuffer-filter-group-kill-ring" variable nil nil [14245 14288])
            ("ibuffer-old-time" variable (:default-value 72) nil [14290 14561])
            ("ibuffer-save-with-custom" variable (:default-value t) nil [14563 14800])
            ("ibuffer-repair-saved-filters" function (:user-visible-flag t) nil [14802 15809])
            ("ibuffer-ext-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [15811 16418])
            ("define-minor-mode" code nil nil [16435 16921])
            ("ibuffer-auto-update-changed" function nil nil [16923 17210])
            ("ibuffer-mouse-filter-by-mode" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17227 17404])
            ("ibuffer-interactive-filter-by-mode" function
               (:user-visible-flag t
                :arguments ("event-or-point"))
                nil [17421 17969])
            ("ibuffer-mouse-toggle-filter-group" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17986 18225])
            ("ibuffer-toggle-filter-group" function (:user-visible-flag t) nil [18242 18402])
            ("ibuffer-toggle-filter-group-1" function (:arguments ("posn")) nil [18404 18806])
            ("ibuffer-forward-filter-group" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [18823 19352])
            ("ibuffer-backward-filter-group" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [19369 20008])
            ("ibuffer--maybe-erase-shell-cmd-output" function nil nil [20010 20297])
            ("define-ibuffer-op" code nil nil [20367 20855])
            ("define-ibuffer-op" code nil nil [20933 21330])
            ("define-ibuffer-op" code nil nil [21400 22259])
            ("define-ibuffer-op" code nil nil [22315 22613])
            ("define-ibuffer-op" code nil nil [22678 23214])
            ("define-ibuffer-op" code nil nil [23281 23433])
            ("define-ibuffer-op" code nil nil [23491 23685])
            ("define-ibuffer-op" code nil nil [23744 23974])
            ("define-ibuffer-op" code nil nil [24040 24298])
            ("define-ibuffer-op" code nil nil [24364 24957])
            ("define-ibuffer-op" code nil nil [25022 25439])
            ("define-ibuffer-op" code nil nil [25511 25956])
            ("define-ibuffer-op" code nil nil [26013 26150])
            ("ibuffer-included-in-filters-p" function (:arguments ("buf" "filters")) nil [26167 26585])
            ("ibuffer-unary-operand" function (:arguments ("filter")) nil [26587 26915])
            ("ibuffer-included-in-filter-p" function (:arguments ("buf" "filter")) nil [26917 27518])
            ("ibuffer-included-in-filter-p-1" function (:arguments ("buf" "filter")) nil [27520 28710])
            ("ibuffer-generate-filter-groups" function (:arguments ("bmarklist" "noempty" "nodefault")) nil [28712 29705])
            ("ibuffer-filters-to-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [29722 30046])
            ("ibuffer-set-filter-groups-by-mode" function (:user-visible-flag t) nil [30063 30638])
            ("ibuffer-pop-filter-group" function (:user-visible-flag t) nil [30655 30949])
            ("ibuffer-read-filter-group-name" function (:arguments ("msg" "nodefault" "noerror")) nil [30951 31613])
            ("ibuffer-decompose-filter-group" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [31630 32032])
            ("ibuffer-clear-filter-groups" function (:user-visible-flag t) nil [32049 32227])
            ("ibuffer-current-filter-groups-with-position" function nil nil [32229 32704])
            ("ibuffer-jump-to-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [32721 33053])
            ("ibuffer-kill-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [33070 33739])
            ("ibuffer-kill-line" function
               (:user-visible-flag t
                :arguments ("arg" "interactive-p"))
                nil [33756 34163])
            ("ibuffer-insert-filter-group-before" function (:arguments ("newgroup" "group")) nil [34165 34789])
            ("ibuffer-yank" function (:user-visible-flag t) nil [34806 35098])
            ("ibuffer-yank-filter-group" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35115 35573])
            ("ibuffer-save-filter-groups" function
               (:user-visible-flag t
                :arguments ("name" "groups"))
                nil [35590 36165])
            ("ibuffer-delete-saved-filter-groups" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36182 36675])
            ("ibuffer-switch-to-saved-filter-groups" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [36692 37551])
            ("ibuffer-filter-disable" function
               (:user-visible-flag t
                :arguments ("delete-filter-groups"))
                nil [37568 38075])
            ("ibuffer-pop-filter" function (:user-visible-flag t) nil [38092 38428])
            ("ibuffer-push-filter" function (:arguments ("filter-specification")) nil [38430 38776])
            ("ibuffer-decompose-filter" function (:user-visible-flag t) nil [38793 39883])
            ("ibuffer-exchange-filters" function (:user-visible-flag t) nil [39900 40214])
            ("ibuffer-negate-filter" function (:user-visible-flag t) nil [40231 40603])
            ("ibuffer--or-and-filter" function (:arguments ("op" "decompose")) nil [40605 41327])
            ("ibuffer-or-filter" function
               (:user-visible-flag t
                :arguments ("decompose"))
                nil [41344 41609])
            ("ibuffer-and-filter" function
               (:user-visible-flag t
                :arguments ("decompose"))
                nil [41626 41895])
            ("ibuffer-maybe-save-stuff" function nil nil [41897 42186])
            ("ibuffer-save-filters" function
               (:user-visible-flag t
                :arguments ("name" "filters"))
                nil [42203 42753])
            ("ibuffer-delete-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [42770 43192])
            ("ibuffer-add-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [43209 43583])
            ("ibuffer-switch-to-saved-filters" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [43600 43997])
            ("ibuffer-format-filter-group-data" function (:arguments ("filter")) nil [43999 44207])
            ("ibuffer-format-qualifier" function (:arguments ("qualifier")) nil [44209 44452])
            ("ibuffer-format-qualifier-1" function (:arguments ("qualifier")) nil [44454 45062])
            ("ibuffer-list-buffer-modes" function (:arguments ("include-parents")) nil [45064 45604])
            ("define-ibuffer-filter" code nil nil [45701 46540])
            ("define-ibuffer-filter" code nil nil [46608 47392])
            ("define-ibuffer-filter" code nil nil [47463 48096])
            ("define-ibuffer-filter" code nil nil [48159 48389])
            ("define-ibuffer-filter" code nil nil [48455 48595])
            ("define-ibuffer-filter" code nil nil [48666 48971])
            ("define-ibuffer-filter" code nil nil [49038 49448])
            ("define-ibuffer-filter" code nil nil [49515 49973])
            ("define-ibuffer-filter" code nil nil [50046 50595])
            ("define-ibuffer-filter" code nil nil [50663 51306])
            ("define-ibuffer-filter" code nil nil [51373 51658])
            ("define-ibuffer-filter" code nil nil [51725 52003])
            ("define-ibuffer-filter" code nil nil [52070 52236])
            ("define-ibuffer-filter" code nil nil [52308 52504])
            ("define-ibuffer-filter" code nil nil [52570 52881])
            ("define-ibuffer-filter" code nil nil [52949 53192])
            ("ibuffer-filter-chosen-by-completion" function (:user-visible-flag t) nil [53268 54139])
            ("ibuffer-toggle-sorting-mode" function (:user-visible-flag t) nil [54170 54806])
            ("ibuffer-invert-sorting" function (:user-visible-flag t) nil [54823 55115])
            ("define-ibuffer-sorter" code nil nil [55185 55470])
            ("define-ibuffer-sorter" code nil nil [55539 55864])
            ("define-ibuffer-sorter" code nil nil [55934 56130])
            ("define-ibuffer-sorter" code nil nil [56194 56394])
            ("define-ibuffer-sorter" code nil nil [56470 57055])
            ("ibuffer-bs-show" function (:user-visible-flag t) nil [57104 57310])
            ("ibuffer-bs-toggle-all" function (:user-visible-flag t) nil [57312 57560])
            ("ibuffer-add-to-tmp-hide" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [57598 57965])
            ("ibuffer-add-to-tmp-show" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [57982 58353])
            ("ibuffer-forward-next-marked" function
               (:user-visible-flag t
                :arguments ("count" "mark" "direction"))
                nil [58370 59252])
            ("ibuffer-backwards-next-marked" function
               (:user-visible-flag t
                :arguments ("count" "mark"))
                nil [59269 59577])
            ("ibuffer-do-kill-lines" function (:user-visible-flag t) nil [59594 59935])
            ("ibuffer-jump-to-buffer" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [59952 62208])
            ("declare-function" code nil nil [62210 62298])
            ("ibuffer-diff-buffer-with-file-1" function (:arguments ("buffer")) nil [62300 63528])
            ("ibuffer-diff-with-file" function (:user-visible-flag t) nil [63545 64388])
            ("ibuffer-copy-filename-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [64405 66072])
            ("ibuffer-copy-buffername-as-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [66089 66832])
            ("ibuffer-mark-on-buffer" function (:arguments ("func" "ibuffer-mark-on-buffer-mark" "group")) nil [66834 67300])
            ("ibuffer-mark-by-name-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [67317 67542])
            ("ibuffer-locked-buffer-p" function (:arguments ("buf")) nil [67544 67846])
            ("ibuffer-mark-by-locked" function (:user-visible-flag t) nil [67863 68059])
            ("ibuffer-mark-by-mode-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [68076 68369])
            ("ibuffer-mark-by-file-name-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [68386 68812])
            ("ibuffer-mark-by-content-regexp" function
               (:user-visible-flag t
                :arguments ("regexp" "all-buffers"))
                nil [68829 69975])
            ("ibuffer-mark-by-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [69992 70572])
            ("ibuffer-mark-modified-buffers" function (:user-visible-flag t) nil [70589 70745])
            ("ibuffer-mark-unsaved-buffers" function (:user-visible-flag t) nil [70762 71012])
            ("ibuffer-mark-dissociated-buffers" function (:user-visible-flag t) nil [71029 71511])
            ("ibuffer-mark-help-buffers" function (:user-visible-flag t) nil [71528 71785])
            ("ibuffer-mark-compressed-file-buffers" function (:user-visible-flag t) nil [71802 72131])
            ("ibuffer-mark-old-buffers" function (:user-visible-flag t) nil [72148 72485])
            ("ibuffer-mark-special-buffers" function (:user-visible-flag t) nil [72502 72732])
            ("ibuffer-mark-read-only-buffers" function (:user-visible-flag t) nil [72749 72926])
            ("ibuffer-mark-dired-buffers" function (:user-visible-flag t) nil [72943 73125])
            ("ibuffer-do-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "nlines"))
                nil [73142 73770])
            ("ibuf-ext" package nil nil [73772 73791]))          
      :file "ibuf-ext.el.gz"
      :pointmax 73898
      :fsize 16858
      :lastmodtime '(24807 40778 0 0)
      :unmatched-syntax '((close-paren 1631 . 1632) (symbol 1551 . 1568) (open-paren 1550 . 1551)))
    (semanticdb-table "semanticdb-table-15937820f442"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [1786 1802])
            ("ibuf-macs" include nil nil [1763 1783])
            ("cl-lib" include nil nil [1743 1760])
            ("seq" include nil nil [1805 1819])
            ("ibuffer-loaddefs" include nil nil [1821 1848])
            ("ibuffer-auto-mode" variable nil nil [1979 2005])
            ("ibuffer-cached-filter-formats" variable nil nil [2006 2044])
            ("ibuffer-compiled-filter-formats" variable nil nil [2045 2085])
            ("ibuffer-filter-format-alist" variable nil nil [2086 2122])
            ("ibuffer-filter-group-kill-ring" variable nil nil [2123 2162])
            ("ibuffer-filter-groups" variable nil nil [2163 2193])
            ("ibuffer-filtering-qualifiers" variable nil nil [2194 2231])
            ("ibuffer-header-line-format" variable nil nil [2232 2267])
            ("ibuffer-hidden-filter-groups" variable nil nil [2268 2305])
            ("ibuffer-inline-columns" variable nil nil [2306 2337])
            ("ibuffer-show-empty-filter-groups" variable nil nil [2338 2379])
            ("ibuffer-tmp-hide-regexps" variable nil nil [2380 2413])
            ("ibuffer-tmp-show-regexps" variable nil nil [2414 2447])
            ("declare-function" code nil nil [2449 2536])
            ("declare-function" code nil nil [2537 2644])
            ("declare-function" code nil nil [2645 2749])
            ("declare-function" code nil nil [2750 2821])
            ("ibuffer" customgroup (:user-visible-flag t) nil [2823 3090])
            ("ibuffer-formats" variable (:default-value '((mark modified read-only locked " " (name 18 18 :left :elide) " " (size 9 -1 :right) " " (mode 16 16 :left :elide) " " filename-and-process) (mark " " (name 16 -1) " " filename))) nil [3092 6267])
            ("ibuffer-always-compile-formats" variable (:default-value (featurep 'bytecomp)) nil [6269 6511])
            ("ibuffer-fontification-alist" variable (:default-value '((10 buffer-read-only font-lock-constant-face) (15 (and buffer-file-name (string-match ibuffer-compressed-file-name-regexp buffer-file-name)) font-lock-doc-face) (20 (string-match "^\\*" (buffer-name)) font-lock-keyword-face) (25 (and (string-match "^ " (buffer-name)) (null buffer-file-name)) italic) (30 (memq major-mode ibuffer-help-buffer-modes) font-lock-comment-face) (35 (derived-mode-p 'dired-mode) font-lock-function-name-face) (40 (and (boundp 'emacs-lock-mode) emacs-lock-mode) ibuffer-locked-buffer))) nil [6513 7692])
            ("ibuffer-use-other-window" variable nil nil [7694 7813])
            ("ibuffer-default-shrink-to-minimum-size" variable nil nil [7815 7954])
            ("ibuffer-shrink-to-minimum-size" variable nil nil [7955 7998])
            ("ibuffer-display-summary" variable (:default-value t) nil [8000 8097])
            ("ibuffer-truncate-lines" variable (:default-value t) nil [8099 8203])
            ("ibuffer-case-fold-search" variable (:default-value case-fold-search) nil [8205 8319])
            ("ibuffer-default-sorting-mode" variable (:default-value 'recency) nil [8321 8844])
            ("ibuffer-sorting-mode" variable nil nil [8845 8878])
            ("ibuffer-last-sorting-mode" variable nil nil [8879 8917])
            ("ibuffer-default-sorting-reversep" variable nil nil [8919 9035])
            ("ibuffer-sorting-reversep" variable nil nil [9036 9073])
            ("ibuffer-eliding-string" variable (:default-value "...") nil [9075 9179])
            ("ibuffer-maybe-show-predicates" variable (:default-value `(,(lambda (buf) (and (string-match "^ " (buffer-name buf)) (null buffer-file-name))))) nil [9181 9930])
            ("ibuffer-default-display-maybe-show-predicates" variable nil nil [9932 10085])
            ("ibuffer-display-maybe-show-predicates" variable nil nil [10087 10137])
            ("ibuffer-current-format" variable nil nil [10139 10174])
            ("ibuffer-movement-cycle" variable (:default-value t) nil [10176 10297])
            ("ibuffer-modified-char" variable (:default-value 42) nil [10299 10405])
            ("ibuffer-read-only-char" variable (:default-value 37) nil [10407 10515])
            ("ibuffer-marked-char" variable (:default-value 62) nil [10517 10619])
            ("ibuffer-locked-char" variable (:default-value 76) nil [10621 10741])
            ("ibuffer-deletion-char" variable (:default-value 68) nil [10743 10860])
            ("ibuffer-expert" variable nil nil [10862 10981])
            ("ibuffer-view-ibuffer" variable nil nil [10983 11247])
            ("ibuffer-always-show-last-buffer" variable nil nil [11249 11593])
            ("ibuffer-jump-offer-only-visible-buffers" variable nil nil [11595 11793])
            ("ibuffer-use-header-line" variable (:default-value t) nil [11795 11915])
            ("ibuffer-default-directory" variable nil nil [11917 12259])
            ("ibuffer-help-buffer-modes" variable (:default-value '(help-mode apropos-mode Info-mode)) nil [12261 12397])
            ("ibuffer-compressed-file-name-regexp" variable (:default-value "\\.\\(arj\\|bgz\\|bz2\\|gz\\|lzh\\|taz\\|tgz\\|xz\\|zip\\|z\\)$") nil [12399 12624])
            ("ibuffer-hook" variable nil nil [12626 12707])
            ("ibuffer-mode-hook" variable nil nil [12709 12833])
            ("ibuffer-load-hook" variable nil nil [12835 12919])
            ("make-obsolete-variable" code nil nil [12920 13032])
            ("ibuffer-marked-face" variable (:default-value 'warning) nil [13034 13133])
            ("ibuffer-deletion-face" variable (:default-value 'error) nil [13135 13247])
            ("ibuffer-title-face" variable (:default-value 'font-lock-type-face) nil [13249 13350])
            ("ibuffer-filter-group-name-face" variable (:default-value 'bold) nil [13352 13466])
            ("ibuffer-directory-abbrev-alist" variable nil nil [13468 13721])
            ("ibuffer--filter-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (kbd "RET") 'ibuffer-filter-by-mode) (define-key map (kbd "SPC") 'ibuffer-filter-chosen-by-completion) (define-key map (kbd "m") 'ibuffer-filter-by-used-mode) (define-key map (kbd "M") 'ibuffer-filter-by-derived-mode) (define-key map (kbd "n") 'ibuffer-filter-by-name) (define-key map (kbd "E") 'ibuffer-filter-by-process) (define-key map (kbd "*") 'ibuffer-filter-by-starred-name) (define-key map (kbd "f") 'ibuffer-filter-by-filename) (define-key map (kbd "F") 'ibuffer-filter-by-directory) (define-key map (kbd "b") 'ibuffer-filter-by-basename) (define-key map (kbd ".") 'ibuffer-filter-by-file-extension) (define-key map (kbd "<") 'ibuffer-filter-by-size-lt) (define-key map (kbd ">") 'ibuffer-filter-by-size-gt) (define-key map (kbd "i") 'ibuffer-filter-by-modified) (define-key map (kbd "v") 'ibuffer-filter-by-visiting-file) (define-key map (kbd "c") 'ibuffer-filter-by-content) (define-key map (kbd "e") 'ibuffer-filter-by-predicate) (define-key map (kbd "r") 'ibuffer-switch-to-saved-filters) (define-key map (kbd "a") 'ibuffer-add-saved-filters) (define-key map (kbd "x") 'ibuffer-delete-saved-filters) (define-key map (kbd "d") 'ibuffer-decompose-filter) (define-key map (kbd "s") 'ibuffer-save-filters) (define-key map (kbd "p") 'ibuffer-pop-filter) (define-key map (kbd "<up>") 'ibuffer-pop-filter) (define-key map (kbd "!") 'ibuffer-negate-filter) (define-key map (kbd "t") 'ibuffer-exchange-filters) (define-key map (kbd "TAB") 'ibuffer-exchange-filters) (define-key map (kbd "o") 'ibuffer-or-filter) (define-key map (kbd "|") 'ibuffer-or-filter) (define-key map (kbd "&") 'ibuffer-and-filter) (define-key map (kbd "g") 'ibuffer-filters-to-filter-group) (define-key map (kbd "P") 'ibuffer-pop-filter-group) (define-key map (kbd "S-<up>") 'ibuffer-pop-filter-group) (define-key map (kbd "D") 'ibuffer-decompose-filter-group) (define-key map (kbd "/") 'ibuffer-filter-disable) (define-key map (kbd "S") 'ibuffer-save-filter-groups) (define-key map (kbd "R") 'ibuffer-switch-to-saved-filter-groups) (define-key map (kbd "X") 'ibuffer-delete-saved-filter-groups) (define-key map (kbd "\\") 'ibuffer-clear-filter-groups) map)) nil [13723 16101])
            ("ibuffer-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map (kbd "0") 'digit-argument) (define-key map (kbd "1") 'digit-argument) (define-key map (kbd "2") 'digit-argument) (define-key map (kbd "3") 'digit-argument) (define-key map (kbd "4") 'digit-argument) (define-key map (kbd "5") 'digit-argument) (define-key map (kbd "6") 'digit-argument) (define-key map (kbd "7") 'digit-argument) (define-key map (kbd "8") 'digit-argument) (define-key map (kbd "9") 'digit-argument) (define-key map (kbd "m") 'ibuffer-mark-forward) (define-key map (kbd "t") 'ibuffer-toggle-marks) (define-key map (kbd "u") 'ibuffer-unmark-forward) (define-key map (kbd "=") 'ibuffer-diff-with-file) (define-key map (kbd "j") 'ibuffer-jump-to-buffer) (define-key map (kbd "M-g") 'ibuffer-jump-to-buffer) (define-key map (kbd "M-s a C-s") 'ibuffer-do-isearch) (define-key map (kbd "M-s a M-C-s") 'ibuffer-do-isearch-regexp) (define-key map (kbd "M-s a C-o") 'ibuffer-do-occur) (define-key map (kbd "DEL") 'ibuffer-unmark-backward) (define-key map (kbd "M-DEL") 'ibuffer-unmark-all) (define-key map (kbd "* *") 'ibuffer-unmark-all) (define-key map (kbd "* c") 'ibuffer-change-marks) (define-key map (kbd "U") 'ibuffer-unmark-all-marks) (define-key map (kbd "* M") 'ibuffer-mark-by-mode) (define-key map (kbd "* m") 'ibuffer-mark-modified-buffers) (define-key map (kbd "* u") 'ibuffer-mark-unsaved-buffers) (define-key map (kbd "* s") 'ibuffer-mark-special-buffers) (define-key map (kbd "* r") 'ibuffer-mark-read-only-buffers) (define-key map (kbd "* /") 'ibuffer-mark-dired-buffers) (define-key map (kbd "* e") 'ibuffer-mark-dissociated-buffers) (define-key map (kbd "* h") 'ibuffer-mark-help-buffers) (define-key map (kbd "* z") 'ibuffer-mark-compressed-file-buffers) (define-key map (kbd ".") 'ibuffer-mark-old-buffers) (define-key map (kbd "d") 'ibuffer-mark-for-delete) (define-key map (kbd "C-d") 'ibuffer-mark-for-delete-backwards) (define-key map (kbd "k") 'ibuffer-mark-for-delete) (define-key map (kbd "x") 'ibuffer-do-kill-on-deletion-marks) (define-key map (kbd "n") 'ibuffer-forward-line) (define-key map (kbd "SPC") 'forward-line) (define-key map (kbd "p") 'ibuffer-backward-line) (define-key map (kbd "M-}") 'ibuffer-forward-next-marked) (define-key map (kbd "M-{") 'ibuffer-backwards-next-marked) (define-key map (kbd "l") 'ibuffer-redisplay) (define-key map (kbd "g") 'ibuffer-update) (define-key map "`" 'ibuffer-switch-format) (define-key map "-" 'ibuffer-add-to-tmp-hide) (define-key map "+" 'ibuffer-add-to-tmp-show) (define-key map "b" 'ibuffer-bury-buffer) (define-key map (kbd ",") 'ibuffer-toggle-sorting-mode) (define-key map (kbd "s i") 'ibuffer-invert-sorting) (define-key map (kbd "s a") 'ibuffer-do-sort-by-alphabetic) (define-key map (kbd "s v") 'ibuffer-do-sort-by-recency) (define-key map (kbd "s s") 'ibuffer-do-sort-by-size) (define-key map (kbd "s f") 'ibuffer-do-sort-by-filename/process) (define-key map (kbd "s m") 'ibuffer-do-sort-by-major-mode) (define-key map (kbd "M-n") 'ibuffer-forward-filter-group) (define-key map "	" 'ibuffer-forward-filter-group) (define-key map (kbd "M-p") 'ibuffer-backward-filter-group) (define-key map [backtab] 'ibuffer-backward-filter-group) (define-key map (kbd "M-j") 'ibuffer-jump-to-filter-group) (define-key map (kbd "C-k") 'ibuffer-kill-line) (define-key map (kbd "C-y") 'ibuffer-yank) (define-key map (kbd "% n") 'ibuffer-mark-by-name-regexp) (define-key map (kbd "% m") 'ibuffer-mark-by-mode-regexp) (define-key map (kbd "% f") 'ibuffer-mark-by-file-name-regexp) (define-key map (kbd "% g") 'ibuffer-mark-by-content-regexp) (define-key map (kbd "% L") 'ibuffer-mark-by-locked) (define-key map (kbd "C-t") 'ibuffer-visit-tags-table) (define-key map (kbd "|") 'ibuffer-do-shell-command-pipe) (define-key map (kbd "!") 'ibuffer-do-shell-command-file) (define-key map (kbd "~") 'ibuffer-do-toggle-modified) (define-key map (kbd "A") 'ibuffer-do-view) (define-key map (kbd "D") 'ibuffer-do-delete) (define-key map (kbd "E") 'ibuffer-do-eval) (define-key map (kbd "F") 'ibuffer-do-shell-command-file) (define-key map (kbd "I") 'ibuffer-do-query-replace-regexp) (define-key map (kbd "H") 'ibuffer-do-view-other-frame) (define-key map (kbd "N") 'ibuffer-do-shell-command-pipe-replace) (define-key map (kbd "M") 'ibuffer-do-toggle-modified) (define-key map (kbd "O") 'ibuffer-do-occur) (define-key map (kbd "P") 'ibuffer-do-print) (define-key map (kbd "Q") 'ibuffer-do-query-replace) (define-key map (kbd "R") 'ibuffer-do-rename-uniquely) (define-key map (kbd "S") 'ibuffer-do-save) (define-key map (kbd "T") 'ibuffer-do-toggle-read-only) (define-key map (kbd "L") 'ibuffer-do-toggle-lock) (define-key map (kbd "r") 'ibuffer-do-replace-regexp) (define-key map (kbd "V") 'ibuffer-do-revert) (define-key map (kbd "W") 'ibuffer-do-view-and-eval) (define-key map (kbd "X") 'ibuffer-do-shell-command-pipe) (define-key map (kbd "k") 'ibuffer-do-kill-lines) (define-key map (kbd "w") 'ibuffer-copy-filename-as-kill) (define-key map (kbd "B") 'ibuffer-copy-buffername-as-kill) (define-key map (kbd "RET") 'ibuffer-visit-buffer) (define-key map (kbd "e") 'ibuffer-visit-buffer) (define-key map (kbd "f") 'ibuffer-visit-buffer) (define-key map (kbd "C-x C-f") 'ibuffer-find-file) (define-key map (kbd "o") 'ibuffer-visit-buffer-other-window) (define-key map (kbd "C-o") 'ibuffer-visit-buffer-other-window-noselect) (define-key map (kbd "M-o") 'ibuffer-visit-buffer-1-window) (define-key map (kbd "v") 'ibuffer-do-view) (define-key map (kbd "C-x v") 'ibuffer-do-view-horizontally) (define-key map (kbd "C-c C-a") 'ibuffer-auto-mode) (define-key map (kbd "C-x 4 RET") 'ibuffer-visit-buffer-other-window) (define-key map (kbd "C-x 5 RET") 'ibuffer-visit-buffer-other-frame) (define-key map (kbd "/") ibuffer--filter-map) map)) nil [16103 22364])
            ("ibuffer-mode--groups-menu-definition" function (:arguments ("is-popup")) nil [22366 24654])
            ("easy-menu-define" code nil nil [24656 24779])
            ("easy-menu-define" code nil nil [24781 27064])
            ("easy-menu-define" code nil nil [27066 32108])
            ("define-obsolete-variable-alias" code nil nil [32110 32202])
            ("easy-menu-define" code nil nil [32203 34112])
            ("ibuffer-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-mouse-toggle-mark) (define-key map [(mouse-2)] 'ibuffer-mouse-visit-buffer) (define-key map [down-mouse-3] 'ibuffer-mouse-popup-menu) map)) nil [34114 34367])
            ("ibuffer-filename/process-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-do-sort-by-filename/process) map)) nil [34369 34528])
            ("ibuffer-mode-name-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-2)] 'ibuffer-mouse-filter-by-mode) (define-key map (kbd "RET") 'ibuffer-interactive-filter-by-mode) map)) nil [34530 34737])
            ("ibuffer-name-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-do-sort-by-alphabetic) map)) nil [34739 34880])
            ("ibuffer-size-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-do-sort-by-size) map)) nil [34882 35017])
            ("ibuffer-mode-header-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-do-sort-by-major-mode) map)) nil [35019 35160])
            ("ibuffer-mode-filter-group-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(mouse-1)] 'ibuffer-mouse-toggle-mark) (define-key map [(mouse-2)] 'ibuffer-mouse-toggle-filter-group) (define-key map (kbd "RET") 'ibuffer-toggle-filter-group) (define-key map [down-mouse-3] 'ibuffer-mouse-popup-menu) map)) nil [35162 35497])
            ("ibuffer-did-modification" variable nil nil [35499 35536])
            ("ibuffer-compiled-formats" variable nil nil [35538 35575])
            ("ibuffer-cached-formats" variable nil nil [35576 35611])
            ("ibuffer-cached-eliding-string" variable nil nil [35612 35654])
            ("ibuffer-sorting-functions-alist" variable nil nil [35656 36156])
            ("ibuffer-columnize-and-insert-list" function (:arguments ("list" "pad-width")) nil [36180 36867])
            ("ibuffer-current-mark" function nil nil [36869 36984])
            ("ibuffer-mouse-toggle-mark" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [36986 37542])
            ("ibuffer-find-file" function
               (:user-visible-flag t
                :arguments ("file" "wildcards"))
                nil [37544 37967])
            ("ibuffer-mouse-visit-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [37969 38177])
            ("ibuffer-mouse-popup-menu" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [38179 38854])
            ("ibuffer-skip-properties" function (:arguments ("props" "direction")) nil [38856 39103])
            ("ibuffer-customize" function (:user-visible-flag t) nil [39105 39223])
            ("ibuffer-backward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [39225 40012])
            ("ibuffer-forward-line" function
               (:user-visible-flag t
                :arguments ("arg" "skip-group-names"))
                nil [40014 41057])
            ("ibuffer-visit-buffer" function
               (:user-visible-flag t
                :arguments ("single"))
                nil [41059 41361])
            ("ibuffer-visit-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("noselect"))
                nil [41363 41661])
            ("ibuffer-visit-buffer-other-window-noselect" function (:user-visible-flag t) nil [41663 41846])
            ("ibuffer-visit-buffer-other-frame" function (:user-visible-flag t) nil [41848 42076])
            ("ibuffer-visit-buffer-1-window" function (:user-visible-flag t) nil [42078 42222])
            ("ibuffer-bury-buffer" function (:user-visible-flag t) nil [42224 42491])
            ("ibuffer-visit-tags-table" function (:user-visible-flag t) nil [42493 42769])
            ("ibuffer-do-view" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [42771 43143])
            ("ibuffer-do-view-horizontally" function
               (:user-visible-flag t
                :arguments ("other-frame"))
                nil [43145 43345])
            ("ibuffer-do-view-1" function (:arguments ("type")) nil [43347 44303])
            ("ibuffer-do-view-other-frame" function (:user-visible-flag t) nil [44305 44438])
            ("ibuffer-map-marked-lines" function (:arguments ("func")) nil [44440 44565])
            ("ibuffer-shrink-to-fit" function (:arguments ("owin")) nil [44567 44960])
            ("ibuffer-confirm-operation-on" function (:arguments ("operation" "names")) nil [44962 46603])
            ("ibuffer-map-lines-nomodify" function (:arguments ("function")) nil [46605 46751])
            ("ibuffer-buffer-names-with-mark" function (:arguments ("mark")) nil [46753 47050])
            ("ibuffer-marked-buffer-names" function nil nil [47052 47148])
            ("ibuffer-deletion-marked-buffer-names" function nil nil [47150 47257])
            ("ibuffer-count-marked-lines" function (:arguments ("all")) nil [47259 47501])
            ("ibuffer-count-deletion-lines" function nil nil [47503 47637])
            ("ibuffer-map-deletion-lines" function (:arguments ("func")) nil [47639 47734])
            ("ibuffer-assert-ibuffer-mode" function nil nil [47736 47822])
            ("ibuffer-buffer-file-name" function nil nil [47824 48183])
            ("ibuffer--abbreviate-file-name" function (:arguments ("filename")) nil [48185 48399])
            ("define-ibuffer-op" code nil nil [48401 48823])
            ("define-ibuffer-op" code nil nil [48825 49030])
            ("define-ibuffer-op" code nil nil [49032 49435])
            ("define-ibuffer-op" code nil nil [49437 49806])
            ("define-ibuffer-op" code nil nil [49808 50042])
            ("define-ibuffer-op" code nil nil [50044 50326])
            ("ibuffer-unmark-all" function
               (:user-visible-flag t
                :arguments ("mark"))
                nil [50328 50793])
            ("ibuffer-unmark-all-marks" function (:user-visible-flag t) nil [50795 50986])
            ("ibuffer-toggle-marks" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [50988 51650])
            ("ibuffer-change-marks" function
               (:user-visible-flag t
                :arguments ("old" "new"))
                nil [51652 52264])
            ("ibuffer-get-region-and-prefix" function nil nil [52266 52459])
            ("ibuffer-mark-forward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [52461 52745])
            ("ibuffer-unmark-forward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [52747 53019])
            ("ibuffer-unmark-backward" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [53021 53291])
            ("ibuffer-mark-region-or-n-with-char" function (:arguments ("start" "end" "arg" "mark-char")) nil [53293 53601])
            ("ibuffer-mark-interactive" function (:arguments ("arg" "mark" "movement")) nil [53603 54249])
            ("ibuffer-set-mark" function (:arguments ("mark")) nil [54251 54470])
            ("ibuffer-set-mark-1" function (:arguments ("mark")) nil [54472 54680])
            ("ibuffer-mark-for-delete" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [54682 54984])
            ("ibuffer-mark-for-delete-backwards" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [54986 55226])
            ("ibuffer-current-buffer" function (:arguments ("must-be-live")) nil [55228 55615])
            ("ibuffer-active-formats-name" function nil nil [55617 55948])
            ("ibuffer-current-formats" function (:arguments ("uncompiledp")) nil [55950 56294])
            ("ibuffer-current-format" function (:arguments ("uncompiledp")) nil [56296 56487])
            ("ibuffer-expand-format-entry" function (:arguments ("form")) nil [56489 57117])
            ("ibuffer-compile-make-eliding-form" function (:arguments ("strvar" "elide" "from-end-p")) nil [57119 57710])
            ("ibuffer-compile-make-substring-form" function (:arguments ("strvar" "maxvar" "from-end-p")) nil [57712 57985])
            ("ibuffer-compile-make-format-form" function (:arguments ("strvar" "widthform" "alignment")) nil [57987 58409])
            ("ibuffer-compile-format" function (:arguments ("format")) nil [58411 63311])
            ("ibuffer-recompile-formats" function (:user-visible-flag t) nil [63313 63760])
            ("ibuffer-clear-summary-columns" function (:arguments ("format")) nil [63762 63973])
            ("ibuffer-check-formats" function nil nil [63975 64903])
            ("ibuffer-inline-columns" variable nil nil [64905 64940])
            ("ibuffer-locked-buffer" variable
               (:default-value '((((background dark)) (:foreground "RosyBrown")) (t (:foreground "brown4")))
                :type "face")
                nil [64942 65177])
            ("ibuffer-locked-buffer" variable (:default-value 'ibuffer-locked-buffer) nil [65178 65231])
            ("define-ibuffer-column" code nil nil [65233 65299])
            ("define-ibuffer-column" code nil nil [65301 65426])
            ("define-ibuffer-column" code nil nil [65428 65628])
            ("define-ibuffer-column" code nil nil [65630 65756])
            ("define-ibuffer-column" code nil nil [65758 66631])
            ("define-ibuffer-column" code nil nil [66633 66983])
            ("define-ibuffer-column" code nil nil [66985 67242])
            ("define-ibuffer-column" code nil nil [67244 67579])
            ("define-ibuffer-column" code nil nil [67581 67876])
            ("define-ibuffer-column" code nil nil [67878 68875])
            ("ibuffer-format-column" function (:arguments ("str" "width" "alignment")) nil [68877 69159])
            ("ibuffer-buffer-name-face" function (:arguments ("buf" "mark")) nil [69161 69560])
            ("ibuffer-insert-buffer-line" function (:arguments ("buffer" "mark" "format")) nil [69562 69856])
            ("ibuffer-redisplay-current" function nil nil [69966 70557])
            ("ibuffer-map-on-mark" function (:arguments ("mark" "func")) nil [70559 70701])
            ("ibuffer-map-lines" function (:arguments ("function" "nomodify" "group")) nil [70703 72918])
            ("ibuffer--near-buffers" function (:arguments ("n")) nil [72959 73228])
            ("ibuffer-get-marked-buffers" function nil nil [73230 73446])
            ("ibuffer-current-state-list" function (:arguments ("pos")) nil [73448 74209])
            ("ibuffer-current-buffers-with-marks" function (:arguments ("curbufs")) nil [74211 74479])
            ("ibuffer-buf-matches-predicates" function (:arguments ("buf" "predicates")) nil [74481 74721])
            ("ibuffer-filter-buffers" function (:arguments ("ibuffer-buf" "last" "bmarklist" "all")) nil [74723 75218])
            ("ibuffer-visible-p" function (:arguments ("buf" "all" "ibuffer-buf")) nil [75220 75460])
            ("define-ibuffer-sorter" code nil nil [75462 75754])
            ("ibuffer-update-format" function nil nil [75756 75936])
            ("ibuffer-switch-format" function (:user-visible-flag t) nil [75938 76331])
            ("ibuffer-update-title-and-summary" function (:arguments ("format")) nil [76333 79291])
            ("ibuffer-redisplay" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [79294 80008])
            ("ibuffer-update" function
               (:user-visible-flag t
                :arguments ("arg" "silent"))
                nil [80010 81615])
            ("ibuffer-sort-bufferlist" function (:arguments ("bmarklist")) nil [81617 82127])
            ("ibuffer-insert-filter-group" function (:arguments ("name" "display-name" "filter-string" "format" "bmarklist")) nil [82129 83031])
            ("ibuffer-redisplay-engine" function (:arguments ("bmarklist" "_ignore")) nil [83033 84632])
            ("ibuffer-list-buffers" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [84649 84935])
            ("ibuffer-other-window" function
               (:user-visible-flag t
                :arguments ("files-only"))
                nil [84952 85250])
            ("ibuffer" function
               (:user-visible-flag t
                :arguments ("other-window-p" "name" "qualifiers" "noselect" "shrink" "filter-groups" "formats"))
                nil [85267 87320])
            ("ibuffer-jump" function
               (:user-visible-flag t
                :arguments ("other-window"))
                nil [87337 87647])
            ("put" code nil nil [87649 87689])
            ("define-derived-mode" code nil nil [87690 100809])
            ("ibuffer" package nil nil [100811 100829])
            ("run-hooks" code nil nil [100831 100861]))          
      :file "ibuffer.el.gz"
      :pointmax 100888
      :fsize 24462
      :lastmodtime '(24807 40778 0 0)
      :unmatched-syntax '((close-paren 1802 . 1803) (symbol 1723 . 1740) (open-paren 1722 . 1723)))
    (semanticdb-table "semanticdb-table-1593782ea2a0"
      :file "ibuffer-loaddefs.el"
      :fsize 13788
      :lastmodtime '(24807 41180 0 0))
    (semanticdb-table "semanticdb-table-159378896c64"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ansi-color" include nil nil [3956 3977])
            ("cl-lib" include nil nil [3978 3995])
            ("man" customgroup (:user-visible-flag t) nil [3997 4096])
            ("Man-filter-list" variable nil nil [4098 4703])
            ("Man-uses-untabify-flag" variable (:default-value t) nil [4705 4806])
            ("Man-sed-script" variable nil nil [4807 4902])
            ("Man-fontify-manpage-flag" variable (:default-value t) nil [4904 5023])
            ("Man-overstrike" variable
               (:default-value '((t (:inherit bold)))
                :type "face")
                nil [5025 5150])
            ("Man-underline" variable
               (:default-value '((t (:inherit underline)))
                :type "face")
                nil [5152 5282])
            ("Man-reverse" variable
               (:default-value '((t (:inherit highlight)))
                :type "face")
                nil [5284 5414])
            ("Man-ansi-color-map" variable (:default-value (let ((ansi-color-faces-vector [default Man-overstrike default Man-underline Man-underline default default Man-reverse])) (ansi-color-make-color-map))) nil [5416 5664])
            ("Man-notify-method" variable (:default-value 'friendly) nil [5666 6707])
            ("Man-width" variable nil nil [6709 7165])
            ("Man-width-max" variable (:default-value 80) nil [7167 7732])
            ("Man-frame-parameters" variable nil nil [7734 7955])
            ("Man-downcase-section-letters-flag" variable (:default-value t) nil [7957 8421])
            ("Man-circular-pages-flag" variable (:default-value t) nil [8423 8564])
            ("Man-section-translations-alist" variable (:default-value (list '("3C++" . "3") '("3X11" . "3") '("1-UCB" . ""))) nil [8566 9205])
            ("Man-header-file-path" variable (:default-value (let ((arch (with-temp-buffer (when (eq 0 (ignore-errors (call-process "gcc" nil '(t nil) nil "-print-multiarch"))) (goto-char (point-min)) (buffer-substring (point) (line-end-position))))) (base '("/usr/include" "/usr/local/include"))) (if (zerop (length arch)) base (append base (list (expand-file-name arch "/usr/include")))))) nil [9245 9899])
            ("Man-name-local-regexp" variable (:default-value (concat "^" (regexp-opt '("NOM" "NAME")) "$")) nil [9901 10155])
            ("manual-program" variable (:default-value "man") nil [10157 10267])
            ("Man-untabify-command" variable (:default-value "pr") nil [10269 10379])
            ("Man-untabify-command-args" variable (:default-value (list "-t" "-e")) nil [10381 10548])
            ("Man-sed-command" variable (:default-value "sed") nil [10550 10663])
            ("Man-awk-command" variable (:default-value "awk") nil [10665 10778])
            ("Man-coding-system" variable nil nil [10936 11146])
            ("Man-mode-hook" variable nil nil [11148 11244])
            ("Man-cooked-hook" variable nil nil [11246 11378])
            ("Man-name-regexp" variable (:default-value "[-[:alnum:]_­+][-[:alnum:]_.:­+]*") nil [11380 11515])
            ("Man-section-regexp" variable (:default-value "[0-9][a-zA-Z0-9+]*\\|[LNln]") nil [11517 11646])
            ("Man-page-header-regexp" variable (:default-value (if (string-match "-solaris2\\." system-configuration) (concat "^[-[:alnum:]_].*[ 	]\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\)$") (concat "^[ 	]*\\(" Man-name-regexp "(\\(" Man-section-regexp "\\))\\).*\\1"))) nil [11648 11984])
            ("Man-heading-regexp" variable (:default-value "^\\([[:upper:]][[:upper:]0-9 /-]+\\)$") nil [11986 12112])
            ("Man-see-also-regexp" variable (:default-value "\\(SEE ALSO\\|VOIR AUSSI\\|SIEHE AUCH\\|VÉASE TAMBIÉN\\|VEJA TAMBÉM\\|VEDERE ANCHE\\|ZOBACZ TAKŻE\\|İLGİLİ BELGELER\\|参照\\|参见 SEE ALSO\\|參見 SEE ALSO\\)") nil [12114 12413])
            ("Man-first-heading-regexp" variable (:default-value "^NAME$\\|^[ 	]*No manual entry fo.*$") nil [12629 12823])
            ("Man-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\(\\([-‐]
\\)?[ 	]+" Man-name-regexp "\\)*\\)[ 	]*(\\(" Man-section-regexp "\\))")) nil [12825 13046])
            ("Man-apropos-regexp" variable (:default-value (concat "\\[\\(" Man-name-regexp "\\)\\][ 	]*(\\(" Man-section-regexp "\\))")) nil [13048 13236])
            ("Man-synopsis-regexp" variable (:default-value "SYNOPSIS") nil [13238 13394])
            ("Man-files-regexp" variable (:default-value "FILES\\>") nil [13396 13626])
            ("Man-include-regexp" variable (:default-value "#[ 	]*include[ 	]*") nil [13628 13745])
            ("Man-file-name-regexp" variable (:default-value "[^<>\", 	
]+") nil [13747 13867])
            ("Man-normal-file-prefix-regexp" variable (:default-value "[/~$]") nil [13869 13988])
            ("Man-header-regexp" variable (:default-value (concat "\\(" Man-include-regexp "\\)" "[<\"]" "\\(" Man-file-name-regexp "\\)" "[>\"]")) nil [13990 14199])
            ("Man-normal-file-regexp" variable (:default-value (concat Man-normal-file-prefix-regexp Man-file-name-regexp)) nil [14201 14356])
            ("Man-hyphenated-reference-regexp" variable (:default-value (concat "\\(" Man-name-regexp "\\)\\((\\(" Man-section-regexp "\\))\\)?")) nil [14454 14641])
            ("Man-switches" variable nil nil [14643 14877])
            ("Man-specified-section-option" variable (:default-value (if (string-match "-solaris[0-9.]*$" system-configuration) "-s" "")) nil [14879 15057])
            ("Man-support-local-filenames" variable (:default-value 'auto-detect) nil [15059 15332])
            ("man-imenu-title" variable (:default-value "Contents") nil [15334 15485])
            ("defvar-local" code nil nil [15535 15572])
            ("defvar-local" code nil nil [15573 15605])
            ("put" code nil nil [15606 15645])
            ("defvar-local" code nil nil [15647 15679])
            ("defvar-local" code nil nil [15680 15712])
            ("defvar-local" code nil nil [15713 15745])
            ("defvar-local" code nil nil [15746 15779])
            ("defvar-local" code nil nil [15780 15824])
            ("Man-sysv-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g
	s/_//g
        s/o+/o/g
        s/+o/o/g
	:ovstrk
	s/\\(.\\)\\1/\\1/g
	t ovstrk
	}
/\\[[0-9][0-9]*m/ s///g")
                nil [15826 16072])
            ("Man-berkeley-sed-script" variable
               (:constant-flag t
                :default-value "// {	s/_//g\\
	s/_//g\\
        s/o+/o/g\\
        s/+o/o/g\\
	:ovstrk\\
	s/\\(.\\)\\1/\\1/g\\
	t ovstrk\\
	}\\
/\\[[0-9][0-9]*m/ s///g")
                nil [16074 16344])
            ("Man-topic-history" variable nil nil [16346 16398])
            ("Man-mode-syntax-table" variable (:default-value (let ((table (copy-syntax-table (standard-syntax-table)))) (modify-syntax-entry 46 "w" table) (modify-syntax-entry 95 "w" table) (modify-syntax-entry 58 "w" table) table)) nil [16400 16701])
            ("Man-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map (make-composed-keymap button-buffer-map special-mode-map)) (define-key map "n" 'Man-next-section) (define-key map "p" 'Man-previous-section) (define-key map "n" 'Man-next-manpage) (define-key map "p" 'Man-previous-manpage) (define-key map "." 'beginning-of-buffer) (define-key map "r" 'Man-follow-manual-reference) (define-key map "g" 'Man-goto-section) (define-key map "s" 'Man-goto-see-also-section) (define-key map "k" 'Man-kill) (define-key map "u" 'Man-update-manpage) (define-key map "m" 'man) (define-key map "" 'man-follow) (easy-menu-define nil map "`Man-mode' menu." '("Man" ["Next Section" Man-next-section t] ["Previous Section" Man-previous-section t] ["Go To Section..." Man-goto-section t] ["Go To \"SEE ALSO\" Section" Man-goto-see-also-section :active (cl-member Man-see-also-regexp Man--sections :test #'string-match-p)] ["Follow Reference..." Man-follow-manual-reference :active Man--refpages :help "Go to a manpage referred to in the \"SEE ALSO\" section"] "--" ["Next Manpage" Man-next-manpage :active (> (length Man-page-list) 1)] ["Previous Manpage" Man-previous-manpage :active (> (length Man-page-list) 1)] "--" ["Man..." man t] ["Kill Buffer" Man-kill t] ["Quit" quit-window t])) map)) nil [16703 18466])
            ("define-button-type" code nil nil [18479 18642])
            ("Man-xref-button-action" function (:arguments ("button")) nil [18644 18925])
            ("define-button-type" code nil nil [18927 19027])
            ("define-button-type" code nil nil [19030 19345])
            ("define-button-type" code nil nil [19347 19725])
            ("Man-init-defvars" function nil nil [19817 22578])
            ("Man-make-page-mode-string" function nil nil [22580 22811])
            ("Man-build-man-command" function nil nil [22813 24312])
            ("Man-translate-cleanup" function (:arguments ("string")) nil [24315 24735])
            ("Man-translate-references" function (:arguments ("ref")) nil [24737 26102])
            ("Man-support-local-filenames" function nil nil [26104 27470])
            ("Man-default-man-entry" function (:arguments ("pos")) nil [27591 31705])
            ("defalias" code nil nil [31983 32012])
            ("Man-completion-cache" variable nil nil [32014 32252])
            ("Man-man-k-use-anchor" variable (:default-value (memq system-type '(gnu gnu/linux gnu/kfreebsd))) nil [32254 32782])
            ("Man-parse-man-k" function nil nil [32784 34440])
            ("Man-completion-table" function (:arguments ("string" "pred" "action")) nil [34442 37935])
            ("man" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [37952 40540])
            ("man-follow" function
               (:user-visible-flag t
                :arguments ("man-args"))
                nil [40557 40826])
            ("Man-columns" variable nil nil [40828 40852])
            ("Man-columns" function nil nil [40854 41355])
            ("Man-start-calling" function (:arguments ("body")) nil [41357 43515])
            ("Man-getpage-in-background" function (:arguments ("topic")) nil [43517 45247])
            ("Man-update-manpage" function (:user-visible-flag t) nil [45249 46203])
            ("Man--window-state-change-timer" variable nil nil [46205 46248])
            ("Man--window-state-change" function (:arguments ("window")) nil [46250 46533])
            ("Man-fit-to-window" function (:arguments ("window")) nil [46535 46983])
            ("Man-notify-when-ready" function (:arguments ("man-buffer")) nil [46985 48553])
            ("Man-softhyphen-to-minus" function nil nil [48555 48887])
            ("Man-fontify-manpage" function (:user-visible-flag t) nil [48889 51474])
            ("Man-highlight-references" function (:arguments ("xref-man-type")) nil [51476 52705])
            ("Man-highlight-references0" function (:arguments ("start-section" "regexp" "button-pos" "target" "type")) nil [52707 53598])
            ("Man-cleanup-manpage" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [53600 54878])
            ("Man-bgproc-filter" function (:arguments ("process" "string")) nil [54880 55955])
            ("Man-bgproc-sentinel" function (:arguments ("process" "msg")) nil [55957 59714])
            ("Man-page-from-arguments" function (:arguments ("args")) nil [59716 59971])
            ("bookmark-make-record-function" variable nil nil [60099 60137])
            ("define-derived-mode" code nil nil [60139 60410])
            ("define-derived-mode" code nil nil [60412 62937])
            ("Man-build-section-list" function nil nil [62939 63351])
            ("Man-build-references-alist" function nil nil [63353 64592])
            ("Man-build-page-list" function nil nil [64594 65730])
            ("Man-strip-page-headers" function nil nil [65732 66607])
            ("Man-unindent" function nil nil [66609 67907])
            ("Man-next-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [68007 68581])
            ("Man-previous-section" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [68583 68907])
            ("Man-find-section" function (:arguments ("section")) nil [68909 69266])
            ("Man--last-section" variable nil nil [69268 69298])
            ("Man-goto-section" function
               (:user-visible-flag t
                :arguments ("section"))
                nil [69300 69898])
            ("Man-goto-see-also-section" function (:user-visible-flag t) nil [69901 70234])
            ("Man-possibly-hyphenated-word" function nil nil [70236 70929])
            ("Man--last-refpage" variable nil nil [70931 70961])
            ("Man-follow-manual-reference" function
               (:user-visible-flag t
                :arguments ("reference"))
                nil [70963 72221])
            ("Man-kill" function (:user-visible-flag t) nil [72223 72335])
            ("Man-goto-page" function
               (:user-visible-flag t
                :arguments ("page" "noerror"))
                nil [72337 73360])
            ("Man-next-manpage" function (:user-visible-flag t) nil [73363 73771])
            ("Man-previous-manpage" function (:user-visible-flag t) nil [73773 74190])
            ("Man-view-header-file" function (:arguments ("file")) nil [74215 74658])
            ("declare-function" code nil nil [74685 74797])
            ("declare-function" code nil nil [74798 74861])
            ("declare-function" code nil nil [74862 74922])
            ("declare-function" code nil nil [74923 74987])
            ("Man-default-bookmark-title" function nil nil [74989 75314])
            ("Man-bookmark-make-record" function nil nil [75316 75590])
            ("Man-bookmark-jump" function (:arguments ("bookmark")) nil [75607 76258])
            ("Man-init-defvars" code nil nil [76318 76336])
            ("man" package nil nil [76338 76352]))          
      :file "man.el.gz"
      :pointmax 76375
      :fsize 22559
      :lastmodtime '(24807 40778 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table-15937867f672"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cus-face" include nil nil [4464 4483])
            ("wid-edit" include nil nil [4484 4503])
            ("custom-versions-load-alist" variable nil nil [4505 4540])
            ("recentf-exclude" variable nil nil [4557 4581])
            ("condition-case" code nil nil [4602 4660])
            ("condition-case" code nil nil [4662 4721])
            ("put" code nil nil [4723 4767])
            ("put" code nil nil [4768 4816])
            ("custom-add-to-group" code nil nil [4817 4886])
            ("emacs" customgroup (:user-visible-flag t) nil [4915 5015])
            ("editing" customgroup (:user-visible-flag t) nil [5070 5143])
            ("convenience" customgroup (:user-visible-flag t) nil [5145 5232])
            ("files" customgroup (:user-visible-flag t) nil [5234 5301])
            ("wp" customgroup (:user-visible-flag t) nil [5303 5434])
            ("text" customgroup (:user-visible-flag t) nil [5436 5582])
            ("data" customgroup (:user-visible-flag t) nil [5584 5662])
            ("abbrev" customgroup (:user-visible-flag t) nil [5664 5783])
            ("matching" customgroup (:user-visible-flag t) nil [5785 5871])
            ("emulations" customgroup (:user-visible-flag t) nil [5873 5993])
            ("external" customgroup (:user-visible-flag t) nil [5995 6073])
            ("comm" customgroup (:user-visible-flag t) nil [6075 6193])
            ("processes" customgroup (:user-visible-flag t) nil [6195 6299])
            ("programming" customgroup (:user-visible-flag t) nil [6301 6391])
            ("languages" customgroup (:user-visible-flag t) nil [6393 6484])
            ("lisp" customgroup (:user-visible-flag t) nil [6486 6661])
            ("c" customgroup (:user-visible-flag t) nil [6663 6863])
            ("tools" customgroup (:user-visible-flag t) nil [6865 6930])
            ("applications" customgroup (:user-visible-flag t) nil [6932 7010])
            ("calendar" customgroup (:user-visible-flag t) nil [7012 7100])
            ("mail" customgroup (:user-visible-flag t) nil [7102 7184])
            ("news" customgroup (:user-visible-flag t) nil [7186 7301])
            ("games" customgroup (:user-visible-flag t) nil [7303 7379])
            ("development" customgroup (:user-visible-flag t) nil [7381 7469])
            ("docs" customgroup (:user-visible-flag t) nil [7471 7549])
            ("extensions" customgroup (:user-visible-flag t) nil [7551 7634])
            ("internal" customgroup (:user-visible-flag t) nil [7636 7736])
            ("maint" customgroup (:user-visible-flag t) nil [7738 7855])
            ("environment" customgroup (:user-visible-flag t) nil [7857 7939])
            ("hardware" customgroup (:user-visible-flag t) nil [7941 8043])
            ("terminals" customgroup (:user-visible-flag t) nil [8045 8123])
            ("unix" customgroup (:user-visible-flag t) nil [8125 8227])
            ("i18n" customgroup (:user-visible-flag t) nil [8229 8398])
            ("x" customgroup (:user-visible-flag t) nil [8400 8463])
            ("frames" customgroup (:user-visible-flag t) nil [8465 8557])
            ("tex" customgroup (:user-visible-flag t) nil [8559 8705])
            ("faces" customgroup (:user-visible-flag t) nil [8707 8775])
            ("help" customgroup (:user-visible-flag t) nil [8777 8848])
            ("multimedia" customgroup (:user-visible-flag t) nil [8850 8947])
            ("local" customgroup (:user-visible-flag t) nil [8949 9014])
            ("customize" customgroup
               (:user-visible-flag t
                :value '((widgets custom-group)))
                nil [9016 9145])
            ("custom-faces" customgroup (:user-visible-flag t) nil [9147 9239])
            ("custom-browse" customgroup (:user-visible-flag t) nil [9241 9340])
            ("custom-buffer" customgroup (:user-visible-flag t) nil [9342 9441])
            ("custom-menu" customgroup (:user-visible-flag t) nil [9443 9538])
            ("alloc" customgroup (:user-visible-flag t) nil [9540 9669])
            ("undo" customgroup (:user-visible-flag t) nil [9671 9779])
            ("mode-line" customgroup (:user-visible-flag t) nil [9781 9858])
            ("editing-basics" customgroup (:user-visible-flag t) nil [9860 9942])
            ("display" customgroup (:user-visible-flag t) nil [9944 10033])
            ("execute" customgroup (:user-visible-flag t) nil [10035 10110])
            ("installation" customgroup (:user-visible-flag t) nil [10112 10189])
            ("dired" customgroup (:user-visible-flag t) nil [10191 10256])
            ("limits" customgroup (:user-visible-flag t) nil [10258 10325])
            ("debug" customgroup (:user-visible-flag t) nil [10327 10397])
            ("keyboard" customgroup (:user-visible-flag t) nil [10399 10473])
            ("menu" customgroup (:user-visible-flag t) nil [10475 10542])
            ("auto-save" customgroup (:user-visible-flag t) nil [10544 10624])
            ("processes-basics" customgroup (:user-visible-flag t) nil [10626 10717])
            ("mule" customgroup (:user-visible-flag t) nil [10719 10790])
            ("windows" customgroup (:user-visible-flag t) nil [10792 10906])
            ("custom-mode-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map widget-keymap) (define-key map [remap self-insert-command] 'Custom-no-edit) (define-key map "" 'Custom-newline) (define-key map " " 'scroll-up-command) (define-key map [33554464] 'scroll-down-command) (define-key map "" 'scroll-down-command) (define-key map "" 'Custom-set) (define-key map "" 'Custom-save) (define-key map "q" 'Custom-buffer-done) (define-key map "u" 'Custom-goto-parent) (define-key map "n" 'widget-forward) (define-key map "p" 'widget-backward) map)) nil [10933 11581])
            ("custom-mode-link-map" variable (:default-value (let ((map (make-keymap))) (set-keymap-parent map custom-mode-map) (define-key map [down-mouse-2] nil) (define-key map [down-mouse-1] 'mouse-drag-region) (define-key map [mouse-2] 'widget-move-and-invoke) map)) nil [11583 11889])
            ("custom-field-keymap" variable (:default-value (let ((map (copy-keymap widget-field-keymap))) (define-key map "" 'Custom-set) (define-key map "" 'Custom-save) map)) nil [11891 12131])
            ("widget-put" code nil nil [12133 12208])
            ("custom-split-regexp-maybe" function (:arguments ("regexp")) nil [12226 12538])
            ("custom-variable-prompt" function nil nil [12540 13065])
            ("custom-actioned-widget" variable nil nil [13067 13411])
            ("custom-menu-filter" function (:arguments ("menu" "widget")) nil [13413 13964])
            ("custom-prefix-list" variable nil nil [13982 14080])
            ("custom-unlispify-menu-entries" variable (:default-value t) nil [14082 14229])
            ("custom-unlispify-remove-prefixes" variable nil nil [14231 14587])
            ("custom-unlispify-menu-entry" function (:arguments ("symbol" "no-suffix")) nil [14589 15783])
            ("custom-unlispify-tag-names" variable (:default-value t) nil [15785 15928])
            ("custom-unlispify-tag-name" function (:arguments ("symbol")) nil [15930 16122])
            ("custom-prefix-add" function (:arguments ("symbol" "prefixes")) nil [16124 16302])
            ("custom-guess-name-alist" variable (:default-value '(("-p\\'" boolean) ("-flag\\'" boolean) ("-hook\\'" hook) ("-face\\'" face) ("-file\\'" file) ("-function\\'" function) ("-functions\\'" (repeat function)) ("-list\\'" (repeat sexp)) ("-alist\\'" (alist :key-type sexp :value-type sexp)))) nil [16316 17038])
            ("custom-guess-doc-alist" variable (:default-value '(("\\`\\*?Non-nil " boolean))) nil [17040 17553])
            ("custom-guess-type" function (:arguments ("symbol")) nil [17555 18357])
            ("custom-browse-sort-alphabetically" variable nil nil [18388 18554])
            ("custom-browse-order-groups" variable nil nil [18556 18852])
            ("custom-browse-only-groups" variable nil nil [18854 19009])
            ("custom-buffer-sort-alphabetically" variable (:default-value t) nil [19026 19206])
            ("custom-buffer-order-groups" variable (:default-value 'last) nil [19208 19506])
            ("custom-menu-sort-alphabetically" variable nil nil [19523 19680])
            ("custom-menu-order-groups" variable (:default-value 'first) nil [19682 19977])
            ("custom-sort-items" function (:arguments ("items" "sort-alphabetically" "order-groups")) nil [19979 21078])
            ("custom-commands" variable (:default-value '((" Apply " Custom-set t "Apply settings (for the current session only)." "index" "Apply" (modified)) (" Apply and Save " Custom-save (or custom-file user-init-file) "Apply settings and save for future sessions." "save" "Save" (modified set changed rogue)) (" Undo Edits " Custom-reset-current t "Restore customization buffer to reflect existing settings." "refresh" "Undo" (modified)) (" Reset Customizations " Custom-reset-saved t "Undo any settings applied only for the current session." "undo" "Reset" (modified set changed rogue)) (" Erase Customizations " Custom-reset-standard (or custom-file user-init-file) "Un-customize settings in this and future sessions." "delete" "Uncustomize" (modified set changed rogue saved)) (" Help for Customize " Custom-help t "Get help for using Customize." "help" "Help" t) (" Exit " Custom-buffer-done t "Exit Customize." "exit" "Exit" t))) nil [21253 23090])
            ("defvar-local" code nil nil [23092 23429])
            ("Custom-help" function (:user-visible-flag t) nil [23431 23567])
            ("custom-reset-menu" variable nil nil [23569 23932])
            ("custom-reset-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [Custom-reset-current] '(menu-item "Undo Edits in Customization Buffer" Custom-reset-current :enable (seq-some (lambda (option) (eq (widget-get option :custom-state) 'modified)) custom-options))) (define-key-after map [Custom-reset-saved] '(menu-item "Revert This Session's Customizations" Custom-reset-saved :enable (seq-some (lambda (option) (memq (widget-get option :custom-state) '(modified set changed rogue))) custom-options))) (when (or custom-file user-init-file) (define-key-after map [Custom-reset-standard] '(menu-item "Erase Customizations" Custom-reset-standard :enable (seq-some (lambda (option) (memq (widget-get option :custom-state) '(modified set changed rogue saved))) custom-options)))) map)) nil [23934 25287])
            ("custom-options" variable nil nil [25289 25365])
            ("custom-command-apply" function (:arguments ("fun" "query" "strong-query")) nil [25367 25989])
            ("Custom-set" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [25991 26297])
            ("Custom-save" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [26299 27068])
            ("custom-reset" function (:arguments ("_widget" "event")) nil [27070 27393])
            ("Custom-reset-current" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [27395 27754])
            ("Custom-reset-saved" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [27756 28181])
            ("custom-reset-standard-variables-list" variable nil nil [28603 28652])
            ("custom-reset-standard-faces-list" variable nil nil [28653 28698])
            ("custom-reset-standard-save-and-update" function nil nil [28952 30120])
            ("Custom-reset-standard" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [30122 31037])
            ("custom-prompt-variable" function (:arguments ("prompt-var" "prompt-val" "comment")) nil [31067 32847])
            ("customize-set-value" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [32864 33634])
            ("customize-set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [33651 34898])
            ("customize-save-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "comment"))
                nil [34915 36394])
            ("customize-push-and-save" function (:arguments ("list-var" "elts")) nil [36679 37345])
            ("customize" function (:user-visible-flag t) nil [37362 37674])
            ("customize-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [37691 38325])
            ("customize-read-group" function nil nil [38327 38727])
            ("customize-group" function
               (:user-visible-flag t
                :arguments ("group" "other-window"))
                nil [38744 39544])
            ("customize-group-other-window" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [39561 39766])
            ("defalias" code nil nil [39783 39831])
            ("customize-option" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [39848 40313])
            ("defalias" code nil nil [40330 40404])
            ("customize-option-other-window" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [40421 40967])
            ("customize-changed-options-previous-release" variable (:default-value "26.3") nil [40969 41092])
            ("customize-package-emacs-version-alist" variable nil nil [41170 42510])
            ("define-obsolete-function-alias" code nil nil [42527 42615])
            ("customize-changed" function
               (:user-visible-flag t
                :arguments ("since-version"))
                nil [42632 45049])
            ("customize-package-emacs-version" function (:arguments ("symbol" "package-version")) nil [45051 46318])
            ("customize-version-lessp" function (:arguments ("version1" "version2")) nil [46320 47179])
            ("customize-face" function
               (:user-visible-flag t
                :arguments ("face" "other-window"))
                nil [47196 48485])
            ("customize-face-other-window" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [48502 48965])
            ("custom-unsaved-options" function nil nil [48967 49572])
            ("defalias" code nil nil [49574 49625])
            ("customize-unsaved" function (:user-visible-flag t) nil [49642 49958])
            ("customize-rogue" function (:user-visible-flag t) nil [49975 50651])
            ("customize-saved" function (:user-visible-flag t) nil [50667 51266])
            ("declare-function" code nil nil [51268 51328])
            ("apropos-regexp" variable nil nil [51329 51352])
            ("customize-apropos" function
               (:user-visible-flag t
                :arguments ("pattern" "type"))
                nil [51369 53156])
            ("customize-apropos-options" function
               (:user-visible-flag t
                :arguments ("regexp" "ignored"))
                nil [53173 53390])
            ("customize-apropos-faces" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [53407 53585])
            ("customize-apropos-groups" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [53602 53784])
            ("custom-prompt-customize-unsaved-options" function nil nil [53801 54148])
            ("custom-buffer-style" variable (:default-value 'links) nil [54163 54550])
            ("custom-buffer-done-kill" variable nil nil [54552 54708])
            ("custom-buffer-indent" variable (:default-value 3) nil [54710 54831])
            ("custom-get-fresh-buffer" function (:arguments ("name")) nil [54833 55747])
            ("custom-buffer-create" function (:arguments ("options" "name" "_description")) nil [55764 56350])
            ("custom-buffer-create-other-window" function (:arguments ("options" "name" "_description")) nil [56367 56929])
            ("custom-reset-button-menu" variable (:default-value t) nil [56931 57160])
            ("custom-buffer-verbose-help" variable (:default-value t) nil [57162 57313])
            ("Custom-buffer-done" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [57315 57484])
            ("custom-button" variable nil nil [57486 57564])
            ("custom-button-mouse" variable nil nil [57566 57656])
            ("custom-button-pressed" variable nil nil [57658 57752])
            ("custom-search-field" variable (:default-value t) nil [57754 57901])
            ("custom-raised-buttons" variable (:default-value (not (equal (face-valid-attribute-values :box) '(("unspecified" . unspecified))))) nil [57903 58522])
            ("custom--invocation-options" variable nil nil [58524 58563])
            ("custom-buffer-create-internal" function (:arguments ("options" "_description")) nil [58565 63582])
            ("customize-browse" function
               (:user-visible-flag t
                :arguments ("group"))
                nil [63622 64954])
            ("define-widget" code nil nil [64956 65130])
            ("custom-browse-visibility-action" function (:arguments ("widget" "_ignore")) nil [65132 65266])
            ("define-widget" code nil nil [65268 65454])
            ("custom-browse-group-tag-action" function (:arguments ("widget" "_ignore")) nil [65456 65621])
            ("define-widget" code nil nil [65623 65816])
            ("custom-browse-variable-tag-action" function (:arguments ("widget" "_ignore")) nil [65818 65989])
            ("define-widget" code nil nil [65991 66172])
            ("custom-browse-face-tag-action" function (:arguments ("widget" "_ignore")) nil [66174 66337])
            ("custom-browse-alist" variable
               (:constant-flag t
                :default-value '(("   " "space") (" | " "vertical") ("-\\ " "top") (" |-" "middle") (" `-" "bottom")))
                nil [66339 66492])
            ("custom-browse-insert-prefix" function (:arguments ("prefix")) nil [66494 66612])
            ("widget-put" code nil nil [66936 66988])
            ("widget-put" code nil nil [66989 67226])
            ("widget-put" code nil nil [67227 67286])
            ("define-widget" code nil nil [67321 67630])
            ("custom-magic-faces" customgroup (:user-visible-flag t) nil [67664 67780])
            ("custom-invalid" variable
               (:default-value '((((class color)) :foreground "yellow1" :background "red1") (t :weight bold :slant italic :underline t))
                :type "face")
                nil [67782 68002])
            ("custom-rogue" variable
               (:default-value '((((class color)) :foreground "pink" :background "black") (t :underline t))
                :type "face")
                nil [68004 68211])
            ("custom-modified" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [68213 68502])
            ("custom-set" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "blue1" :background "white") (((class color)) :foreground "blue" :background "white") (t :slant italic))
                :type "face")
                nil [68504 68791])
            ("custom-changed" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [68793 69076])
            ("custom-themed" variable
               (:default-value '((((min-colors 88) (class color)) :foreground "white" :background "blue1") (((class color)) :foreground "white" :background "blue") (t :slant italic))
                :type "face")
                nil [69078 69363])
            ("custom-saved" variable
               (:default-value '((t :underline t))
                :type "face")
                nil [69365 69490])
            ("custom-magic-alist" variable
               (:constant-flag t
                :default-value '((nil "#" underline "UNINITIALIZED, you should not see this.") (unknown "?" italic "UNKNOWN, you should not see this.") (hidden "-" default "HIDDEN, invoke \"Show\" in the previous line to show." "group now hidden, invoke \"Show\", above, to show contents.") (invalid "x" custom-invalid "INVALID, the displayed value cannot be set.") (modified "*" custom-modified "EDITED, shown value does not take effect until you set or save it." "something in this group has been edited but not set.") (set "+" custom-set "SET for current session only." "something in this group has been set but not saved.") (changed ":" custom-changed "CHANGED outside Customize." "something in this group has been changed outside customize.") (saved "!" custom-saved "SAVED and set." "something in this group has been set and saved.") (themed "o" custom-themed "THEMED." "visible group members are set by enabled themes.") (rogue "@" custom-rogue "NO CUSTOMIZATION DATA; not intended to be customized." "something in this group is not prepared for customization.") (standard " " nil "STANDARD." "visible group members are all at standard values.")))
                nil [69492 71917])
            ("custom-magic-show" variable (:default-value 'long) nil [71919 72179])
            ("custom-magic-show-hidden" variable (:default-value '(option face)) nil [72181 72529])
            ("custom-magic-show-button" variable nil nil [72531 72691])
            ("define-widget" code nil nil [72693 72964])
            ("widget-magic-mouse-down-action" function (:arguments ("widget" "_event")) nil [72966 73168])
            ("custom-magic-value-create" function (:arguments ("widget")) nil [73170 75698])
            ("custom-magic-reset" function (:arguments ("widget" "buffer")) nil [75700 75981])
            ("custom-button" variable
               (:default-value '((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "lightgrey" :foreground "black"))
                :type "face")
                nil [76009 76309])
            ("custom-button-mouse" variable
               (:default-value '((((type x w32 ns) (class color)) :box (:line-width 2 :style released-button) :background "grey90" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [76311 76791])
            ("custom-button-unraised" variable
               (:default-value '((t :inherit underline))
                :type "face")
                nil [76793 76964])
            ("setq" code nil nil [76966 77058])
            ("setq" code nil nil [77060 77151])
            ("custom-button-pressed" variable
               (:default-value '((((type x w32 ns) (class color)) :box (:line-width 2 :style pressed-button) :background "lightgrey" :foreground "black") (t :inverse-video t))
                :type "face")
                nil [77153 77461])
            ("custom-button-pressed-unraised" variable
               (:default-value '((default :inherit custom-button-unraised) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet"))
                :type "face")
                nil [77463 77787])
            ("setq" code nil nil [77789 77911])
            ("custom-documentation" variable
               (:default-value '((t nil))
                :type "face")
                nil [77913 78043])
            ("custom-state" variable
               (:default-value '((((class color) (background dark)) :foreground "lime green") (((class color) (background light)) :foreground "dark green"))
                :type "face")
                nil [78045 78289])
            ("custom-link" variable
               (:default-value '((t :inherit link))
                :type "face")
                nil [78291 78419])
            ("define-widget" code nil nil [78421 78902])
            ("custom-convert-widget" function (:arguments ("widget")) nil [78904 79265])
            ("custom-notify" function (:arguments ("widget" "args")) nil [79267 80156])
            ("custom-redraw" function (:arguments ("widget")) nil [80158 80753])
            ("custom-redraw-magic" function (:arguments ("widget")) nil [80755 81227])
            ("custom-show" function (:arguments ("widget" "value")) nil [81229 81513])
            ("custom-load-widget" function (:arguments ("widget")) nil [81515 81633])
            ("custom-unloaded-symbol-p" function (:arguments ("symbol")) nil [81635 82113])
            ("custom-unloaded-widget-p" function (:arguments ("widget")) nil [82115 82282])
            ("custom-toggle-hide" function (:arguments ("widget")) nil [82284 82743])
            ("custom-toggle-parent" function (:arguments ("widget" "_ignore")) nil [82745 82890])
            ("custom-add-see-also" function (:arguments ("widget" "prefix")) nil [82892 83794])
            ("custom-add-parent-links" function (:arguments ("widget" "initial-string" "_doc-initial-string")) nil [83796 84672])
            ("custom-comment" variable
               (:default-value '((((type tty)) :background "yellow3" :foreground "black") (((class grayscale color) (background light)) :background "gray85") (((class grayscale color) (background dark)) :background "dim gray") (t :slant italic))
                :type "face")
                nil [84735 85124])
            ("custom-comment-tag" variable
               (:default-value '((((class color) (background dark)) :foreground "gray80") (((class color) (background light)) :foreground "blue4") (((class grayscale) (background light)) :foreground "DimGray" :weight bold :slant italic) (((class grayscale) (background dark)) :foreground "LightGray" :weight bold :slant italic) (t :weight bold))
                :type "face")
                nil [85157 85608])
            ("define-widget" code nil nil [85610 85831])
            ("custom-comment-create" function (:arguments ("widget")) nil [85833 86244])
            ("custom-comment-hide" function (:arguments ("widget")) nil [86246 86344])
            ("custom-comment-show" function (:arguments ("widget")) nil [86447 87299])
            ("custom-comment-invisible-p" function (:arguments ("widget")) nil [87301 87479])
            ("custom-variable-obsolete" variable
               (:default-value '((((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :slant italic))
                :type "face")
                nil [87516 87869])
            ("custom-variable-tag" variable
               (:default-value '((((class color) (background dark)) :foreground "light blue" :weight bold) (((min-colors 88) (class color) (background light)) :foreground "blue1" :weight bold) (((class color) (background light)) :foreground "blue" :weight bold) (t :weight bold))
                :type "face")
                nil [87871 88245])
            ("custom-variable-button" variable
               (:default-value '((t :underline t :weight bold))
                :type "face")
                nil [88247 88377])
            ("custom-variable-default-form" variable (:default-value 'edit) nil [88379 88562])
            ("custom-variable-documentation" function (:arguments ("variable")) nil [88564 89714])
            ("define-widget" code nil nil [89716 91286])
            ("custom-variable-type" function (:arguments ("symbol")) nil [91288 92113])
            ("custom-variable-value-create" function (:arguments ("widget")) nil [92115 98116])
            ("custom-toggle-hide-variable" function (:arguments ("visibility-widget" "_ignore")) nil [98118 99211])
            ("custom-tag-action" function (:arguments ("widget" "args")) nil [99213 99406])
            ("custom-tag-mouse-down-action" function (:arguments ("widget" "args")) nil [99408 99634])
            ("custom-variable-state" function (:arguments ("symbol" "val")) nil [99636 101399])
            ("custom-variable-modified-p" function (:arguments ("widget")) nil [101401 102470])
            ("custom-variable-state-set" function (:arguments ("widget" "state")) nil [102472 103097])
            ("custom-variable-standard-value" function (:arguments ("widget")) nil [103099 103192])
            ("custom-variable-current-value" function (:arguments ("widget")) nil [103194 103626])
            ("custom-variable-menu" variable nil nil [103628 104181])
            ("custom-variable-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-variable-set] '(menu-item "Set for Current Session" custom-variable-set :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (when (or custom-file init-file-user) (define-key-after map [custom-variable-save] '(menu-item "Save for Future Sessions" custom-variable-save :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed rogue))))) (define-key-after map [custom-redraw] '(menu-item "Undo Edits" custom-redraw :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified changed)))) (define-key-after map [custom-variable-reset-saved] '(menu-item "Revert This Session's Customization" custom-variable-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed rogue)))) (when (or custom-file init-file-user) (define-key-after map [custom-variable-reset-standard] '(menu-item "Erase Customization" custom-variable-reset-standard :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed saved rogue))))) (define-key-after map [custom-variable-reset-backup] '(menu-item "Set to Backup Value" custom-variable-reset-backup :enable (get (widget-value custom-actioned-widget) 'backup-value))) (define-key-after map [sep0] '(menu-item "---")) (define-key-after map [custom-comment-show] '(menu-item "Add Comment" custom-comment-show :enable (custom-comment-invisible-p custom-actioned-widget))) (define-key-after map [sep1] '(menu-item "---")) (define-key-after map [custom-variable-edit] '(menu-item "Show Current Value" custom-variable-edit :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'edit))) (define-key-after map [custom-variable-edit-lisp] '(menu-item "Show Saved Lisp Expression" custom-variable-edit-lisp :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'lisp))) map)) nil [104183 107599])
            ("custom-variable-action" function (:arguments ("widget" "event")) nil [107601 108752])
            ("custom-variable-edit" function (:arguments ("widget")) nil [108754 108928])
            ("custom-variable-edit-lisp" function (:arguments ("widget")) nil [108930 109140])
            ("custom-variable-set" function (:arguments ("widget")) nil [109142 111079])
            ("custom-variable-mark-to-save" function (:arguments ("widget")) nil [111081 112800])
            ("custom-variable-state-set-and-redraw" function (:arguments ("widget")) nil [112802 113000])
            ("custom-variable-save" function (:arguments ("widget")) nil [113002 113199])
            ("custom-variable-reset-saved" function (:arguments ("widget")) nil [113201 114632])
            ("custom-variable-mark-to-reset-standard" function (:arguments ("widget")) nil [114634 116214])
            ("custom-variable-reset-standard" function (:arguments ("widget")) nil [116216 116660])
            ("custom-variable-backup-value" function (:arguments ("widget")) nil [116662 116961])
            ("custom-variable-reset-backup" function (:arguments ("widget")) nil [116963 117999])
            ("define-widget" code nil nil [118037 118278])
            ("custom-visibility" variable
               (:default-value '((t :height 0.8 :inherit link))
                :type "face")
                nil [118280 118428])
            ("define-widget" code nil nil [118466 119375])
            ("custom-face-edit-value-create" function (:arguments ("widget")) nil [119377 120822])
            ("custom-face-edit-value-visibility-action" function (:arguments ("widget" "_ignore")) nil [120824 121102])
            ("custom-face-edit-fix-value" function (:arguments ("_widget" "value")) nil [121104 121300])
            ("custom-face-edit-convert-widget" function (:arguments ("widget")) nil [121302 121649])
            ("custom-face-edit" variable
               (:constant-flag t
                :default-value (widget-convert 'custom-face-edit))
                nil [121651 121769])
            ("custom-face-edit-deactivate" function (:arguments ("widget")) nil [121771 122325])
            ("custom-face-edit-activate" function (:arguments ("widget")) nil [122327 122801])
            ("custom-face-edit-delete" function (:arguments ("widget")) nil [122803 123365])
            ("custom-face-edit-attribute-tag" function (:arguments ("widget")) nil [123368 123723])
            ("define-widget" code nil nil [123759 126124])
            ("custom-face-tag" variable
               (:default-value '((t :inherit custom-variable-tag))
                :type "face")
                nil [126157 126272])
            ("custom-face-default-form" variable (:default-value 'selected) nil [126274 126476])
            ("custom-face-documentation" function (:arguments ("face")) nil [126478 127238])
            ("define-widget" code nil nil [127240 128792])
            ("define-widget" code nil nil [128794 129222])
            ("custom-face-all" variable
               (:constant-flag t
                :default-value (widget-convert 'custom-face-all))
                nil [129224 129339])
            ("custom-filter-face-spec" function (:arguments ("spec" "filter-index" "default-filter")) nil [129341 130468])
            ("custom-pre-filter-face-spec" function (:arguments ("spec")) nil [130470 130661])
            ("custom-post-filter-face-spec" function (:arguments ("spec")) nil [130663 130813])
            ("custom-face-widget-to-spec" function (:arguments ("widget")) nil [130815 131227])
            ("custom-face-get-current-spec" function (:arguments ("face")) nil [131229 131753])
            ("custom-toggle-hide-face" function (:arguments ("visibility-widget" "_ignore")) nil [131755 132798])
            ("custom-face-value-create" function (:arguments ("widget")) nil [132800 137450])
            ("cus--face-link" function (:arguments ("widget" "_format")) nil [137452 137668])
            ("custom-face-menu" variable nil nil [137670 138207])
            ("custom-face-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-face-set] '(menu-item "Set for Current Session" custom-face-set)) (when (or custom-file init-file-user) (define-key-after map [custom-face-save] '(menu-item "Save for Future Sessions" custom-face-save))) (define-key-after map [custom-redraw] '(menu-item "Undo Edits" custom-redraw :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified changed)))) (define-key-after map [custom-face-reset-saved] '(menu-item "Revert This Session's Customization" custom-face-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set changed)))) (when (or custom-file init-file-user) (define-key-after map [custom-face-reset-standard] '(menu-item "Erase Customization" custom-face-reset-standard :enable (get (widget-value custom-actioned-widget) 'face-defface-spec)))) (define-key-after map [sep0] '(menu-item "---")) (define-key-after map [custom-comment-show] '(menu-item "Add Comment" custom-comment-show :enable (custom-comment-invisible-p custom-actioned-widget))) (define-key-after map [sep1] '(menu-item "---")) (define-key-after map [custom-face-edit-selected] '(menu-item "For Current Display" custom-face-edit-selected :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'selected))) (define-key-after map [custom-face-edit-all] '(menu-item "For All Kinds of Displays" custom-face-edit-all :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'all))) (define-key-after map [custom-face-edit-lisp] '(menu-item "Show Lisp Expression" custom-face-edit-lisp :button (:radio eq (widget-get custom-actioned-widget :custom-form) 'lisp))) map)) nil [138209 140704])
            ("custom-face-edit-selected" function (:arguments ("widget")) nil [140706 140916])
            ("custom-face-edit-all" function (:arguments ("widget")) nil [140918 141113])
            ("custom-face-edit-lisp" function (:arguments ("widget")) nil [141115 141321])
            ("custom-face-state" function (:arguments ("face")) nil [141323 142342])
            ("custom-face-state-set" function (:arguments ("widget")) nil [142344 142798])
            ("custom-face-action" function (:arguments ("widget" "event")) nil [142800 143591])
            ("custom-face-set" function (:arguments ("widget")) nil [143593 144286])
            ("custom-face-mark-to-save" function (:arguments ("widget")) nil [144288 145036])
            ("custom-face-state-set-and-redraw" function (:arguments ("widget")) nil [145038 145224])
            ("custom-face-save" function (:arguments ("widget")) nil [145226 146241])
            ("custom-face-reset-saved" function (:arguments ("widget")) nil [146243 147096])
            ("custom-face-standard-value" function (:arguments ("widget")) nil [147098 147190])
            ("custom-face-mark-to-reset-standard" function (:arguments ("widget")) nil [147192 148790])
            ("custom-face-reset-standard" function (:arguments ("widget")) nil [148792 149115])
            ("widget-face-prompt-value-history" variable nil nil [149141 149238])
            ("define-widget" code nil nil [149240 149913])
            ("widget-face-sample-face-get" function (:arguments ("widget")) nil [149915 150044])
            ("widget-face-notify" function (:arguments ("widget" "child" "event")) nil [150046 150299])
            ("define-widget" code nil nil [150326 150907])
            ("custom-hook-convert-widget" function (:arguments ("widget")) nil [150909 151337])
            ("define-widget" code nil nil [151376 151697])
            ("custom-group-link-action" function (:arguments ("widget" "_ignore")) nil [151699 151796])
            ("custom-group-tag-faces" variable nil nil [151830 152088])
            ("custom-group-tag-1" variable
               (:default-value '((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "pink") (((min-colors 88) (class color) (background light)) :foreground "red1") (((class color) (background light)) :foreground "red"))
                :type "face")
                nil [152090 152424])
            ("custom-group-tag" variable
               (:default-value '((default :weight bold :height 1.2 :inherit variable-pitch) (((class color) (background dark)) :foreground "light blue") (((min-colors 88) (class color) (background light)) :foreground "blue1") (((class color) (background light)) :foreground "blue") (t :weight bold))
                :type "face")
                nil [152426 152797])
            ("custom-group-subtitle" variable
               (:default-value '((t :weight bold))
                :type "face")
                nil [152799 152935])
            ("custom-group-doc-align-col" variable (:default-value 20) nil [152937 152975])
            ("define-widget" code nil nil [152977 153714])
            ("custom-group-sample-face-get" function (:arguments ("widget")) nil [153716 153883])
            ("define-widget" code nil nil [153885 154039])
            ("custom-group-visibility-create" function (:arguments ("widget")) nil [154041 154201])
            ("custom--filter-obsolete-variables" function (:arguments ("items")) nil [154203 154466])
            ("custom-group-members" function (:arguments ("symbol" "groups-only")) nil [154468 154847])
            ("custom-group--draw-horizontal-line" function nil nil [154849 155513])
            ("custom-group-value-create" function (:arguments ("widget")) nil [155515 163097])
            ("custom-group-menu" variable nil nil [163099 163640])
            ("custom-group-extended-menu" variable (:default-value (let ((map (make-sparse-keymap))) (define-key-after map [custom-group-set] '(menu-item "Set for Current Session" custom-group-set :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (when (or custom-file init-file-user) (define-key-after map [custom-group-save] '(menu-item "Save for Future Sessions" custom-group-save :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set))))) (define-key-after map [custom-group-reset-current] '(menu-item "Undo Edits" custom-group-reset-current :enable (eq (widget-get custom-actioned-widget :custom-state) 'modified))) (define-key-after map [custom-group-reset-saved] '(menu-item "Revert This Session's Customizations" custom-group-reset-saved :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set)))) (when (or custom-file init-file-user) (define-key-after map [custom-group-reset-standard] '(menu-item "Erase Customization" custom-group-reset-standard :enable (memq (widget-get custom-actioned-widget :custom-state) '(modified set saved))))) map)) nil [163642 165249])
            ("custom-group-action" function (:arguments ("widget" "event")) nil [165251 166035])
            ("custom-group-set" function (:arguments ("widget")) nil [166037 166264])
            ("custom-group-mark-to-save" function (:arguments ("widget")) nil [166266 166520])
            ("custom-group-state-set-and-redraw" function (:arguments ("widget")) nil [166522 166818])
            ("custom-group-save" function (:arguments ("widget")) nil [166820 166993])
            ("custom-group-reset-current" function (:arguments ("widget")) nil [166995 167233])
            ("custom-group-reset-saved" function (:arguments ("widget")) nil [167235 167484])
            ("custom-group-reset-standard" function (:arguments ("widget")) nil [167486 167771])
            ("custom-group-mark-to-reset-standard" function (:arguments ("widget")) nil [167773 168068])
            ("custom-group-state-update" function (:arguments ("widget")) nil [168070 168663])
            ("custom-file" variable nil nil [168723 170561])
            ("custom-file" function (:arguments ("no-error")) nil [170563 171065])
            ("declare-function" code nil nil [171115 171175])
            ("custom-save-all" function nil nil [171192 172640])
            ("customize-save-customized" function (:user-visible-flag t) nil [172657 173656])
            ("custom-save-delete" function (:arguments ("symbol")) nil [173709 175012])
            ("custom-save-variables" function nil nil [175014 177921])
            ("custom-save-faces" function nil nil [177923 179767])
            ("custom-menu-nesting" variable (:default-value 2) nil [179813 179922])
            ("custom-face-menu-create" function (:arguments ("_widget" "symbol")) nil [179924 180127])
            ("custom-variable-menu-create" function (:arguments ("_widget" "symbol")) nil [180129 180547])
            ("widget-put" code nil nil [180596 180818])
            ("custom-group-menu-create" function (:arguments ("_widget" "symbol")) nil [180820 181114])
            ("custom-menu-create" function (:arguments ("symbol")) nil [181131 182091])
            ("customize-menu-create" function (:arguments ("symbol" "name")) nil [182108 182561])
            ("easy-menu-define" code nil nil [182596 183600])
            ("tool-bar-map" variable nil nil [183602 183623])
            ("custom-tool-bar-map" variable nil nil [183811 183882])
            ("Custom-no-edit" function
               (:user-visible-flag t
                :arguments ("_pos" "_event"))
                nil [183906 184102])
            ("Custom-newline" function
               (:user-visible-flag t
                :arguments ("pos" "event"))
                nil [184104 184779])
            ("Custom-goto-parent" function (:user-visible-flag t) nil [184781 185179])
            ("Custom-mode-hook" variable nil nil [185181 185294])
            ("custom-state-buffer-message" function (:arguments ("widget")) nil [185296 185502])
            ("custom--initialize-widget-variables" function nil nil [185504 186421])
            ("define-derived-mode" code nil nil [186423 188075])
            ("custom--revert-buffer" function (:arguments ("_ignore-auto" "_noconfirm")) nil [188077 188302])
            ("put" code nil nil [188304 188343])
            ("cus-edit" package nil nil [188345 188364]))          
      :file "cus-edit.el.gz"
      :pointmax 188392
      :fsize 44751
      :lastmodtime '(24807 40778 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!share!emacs!28.0.50!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
